/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mysmarthome;

import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.TextField;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author ktams
 */
public class NewDevice extends javax.swing.JFrame {

    String strNewDev;
    String[] NewDevArr;
    ArrayList ParamArr = new ArrayList();
    Config myParent;
    int position;
    int GUIselection;
    String OldName;
    /**
     * Creates new form NewDevice
     */
    public NewDevice() {
        initComponents();
    }

    NewDevice(Config aThis, String string, int Pos, int GUIselect) {
        initComponents();
        ImageIcon II = new ImageIcon(getClass().getResource("pictures/Home.jpg"));
        this.setIconImage(II.getImage());
        strNewDev = string;
        myParent = aThis;
        position = Pos;
        GUIselection = GUIselect;
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jHeadLabel = new javax.swing.JLabel();
        jOK = new javax.swing.JButton();
        jCancel = new javax.swing.JButton();
        jNameLabel = new javax.swing.JLabel();
        jname = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jHeadLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jHeadLabel.setText("Add new device");

        jOK.setText("OK");
        jOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOKActionPerformed(evt);
            }
        });

        jCancel.setText("Cancel");
        jCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCancelActionPerformed(evt);
            }
        });

        jNameLabel.setText("Name: ");

        jname.setText("Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jHeadLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jOK, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 144, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jname)))
                        .addGap(12, 12, 12))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jHeadLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jNameLabel)
                    .addComponent(jname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jOK)
                    .addComponent(jCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOKActionPerformed
        if(jname.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "The device must have a name!");
            return;
        }
        String str = "\n\t\t\"" + jname.getText() + "\": {\n";
        int j = 1;
        if(position != -1)
            j = 2;
        for(int i = j; i < NewDevArr.length-1; i++)
        {            
            if(ParamArr.size() > i && ParamArr.get(i) != null)
            {
                if(NewDevArr[i].contains("\\s"))
                {
                    int indexOf = NewDevArr[i].indexOf("\\s");
                    str += NewDevArr[i].substring(0, indexOf) + "\"";                    
                    TextField t = (TextField) ParamArr.get(i);
                    str += t.getText() + "\"";
                    str += NewDevArr[i].substring(indexOf+2, NewDevArr[i].length());
                }
                else if(NewDevArr[i].contains("\\i"))
                {
                    int indexOf = NewDevArr[i].indexOf("\\i");
                    str += NewDevArr[i].substring(0, indexOf);                    
                    TextField t = (TextField) ParamArr.get(i);
                    str += t.getText();
                    str += NewDevArr[i].substring(indexOf+2, NewDevArr[i].length());
                }
                else if(NewDevArr[i].contains("\\f"))
                {
                    int indexOf = NewDevArr[i].indexOf("\\f");
                    str += NewDevArr[i].substring(0, indexOf);                    
                    TextField t = (TextField) ParamArr.get(i);
                    str += t.getText();
                    str += NewDevArr[i].substring(indexOf+2, NewDevArr[i].length());
                }
                else
                {
                    str += NewDevArr[i];
                    if(!NewDevArr[i].contains("["))
                    {
                        TextField t = (TextField) ParamArr.get(i);
                        str = str.substring(0, str.lastIndexOf("\":")+3);
                        if(NewDevArr[i].substring(NewDevArr[i].lastIndexOf(":"), NewDevArr[i].length()).contains("\""))
                        {
                            str += "\"" + t.getText() + "\"";
                            if(NewDevArr[i].substring(NewDevArr[i].lastIndexOf(":"), NewDevArr[i].length()).contains(","))
                                str += ",";
                        }
                        else
                        {
                            str += t.getText();
                            if(NewDevArr[i].substring(NewDevArr[i].lastIndexOf(":"), NewDevArr[i].length()).contains(","))
                                str += ",";
                        }
                    }
                }
            }
            else
            {
                str += NewDevArr[i];
            } 
            str += "\n";
        }
        str += "\t\t";
        switch(position)
        {
            case -2:    //copy
            case -1:    //new
                myParent.DeviceList.add(str);
                String[] tmp = str.split("\n");
                str = tmp[1].substring(tmp[1].indexOf("\"") + 1, tmp[1].length());
                str = "<html><pre>" + str.substring(0, str.indexOf("\"")) + "\t";
                str += tmp[2].substring(tmp[2].indexOf(":") + 1, tmp[2].length()) + "</pre></html>";
                myParent.DevlistenModell.addElement(str);
                break;
                
            default:    //edit
                myParent.DeviceList.set(position, str);
                tmp = str.split("\n");
                str = tmp[1].substring(tmp[1].indexOf("\"") + 1, tmp[1].length());
                str = "<html><pre>" + str.substring(0, str.indexOf("\"")) + "\t";
                str += tmp[2].substring(tmp[2].indexOf(":") + 1, tmp[2].length()) + "</pre></html>";
                myParent.DevlistenModell.set(position+1, str);
                if(GUIselection != -1)
                {
                    str = myParent.DeviceList.get(position);
                    str = str.substring(0, str.indexOf(":")-1);
                    int i = str.indexOf("\"");
                    String newName = str.substring(i+1, str.length());
                    str = "<html><pre>" + newName + "\t";
                    String s = (String) myParent.GUIlistenModell.get(GUIselection);
                    i = s.indexOf("\"");
                    s = s.substring(i, s.length());
                    str += s;
                    myParent.GUIlistenModell.set(GUIselection, str);
                }
                for(int i = 0; i < myParent.GUIList.size(); i++)
                {
                    str = myParent.GUIList.get(i);
                    if(str.substring(4, str.indexOf(":")-1).contains(OldName))
                    {
                        String[] strA = str.split(OldName);
                        myParent.GUIList.set(i, strA[0] + jname.getText() + strA[1]);
                        break;
                    }
                }
                str = jname.getText();
                for(int i = 0; i < myParent.RulesList.size(); i++)
                {
                    if(myParent.RulesList.get(i).contains(OldName))
                        myParent.RulesList.set(i, myParent.RulesList.get(i).replaceAll(OldName, str));
                }
                break;
        }
        this.dispose();
    }//GEN-LAST:event_jOKActionPerformed

    private void jCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_jCancelActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        NewDevArr = strNewDev.split("\n");
        JLabel l = null;
        if(NewDevArr.length != 0)
        {
            Rectangle r = jNameLabel.getBounds();
            ParamArr.add(jname);
            if(position == -2)  //copy
            {
                jHeadLabel.setText("Copy a device");
                NewDevArr = strNewDev.split("\n");
                int indexOf = NewDevArr[1].indexOf("\"");
                String s = NewDevArr[1].substring(indexOf+1, NewDevArr[1].length());
                indexOf = s.indexOf("\"");
                s = s.substring(0, indexOf);
                OldName = s;
                jname.setText(s);
                ParamArr.add(null);
                for(int i = 2; i < NewDevArr.length; i++)
                {
                    if(NewDevArr[i].contains(":"))
                    {
                        if(!NewDevArr[i].contains("["))
                        {
                            indexOf = NewDevArr[i].indexOf(":");
                            l = new JLabel(NewDevArr[i].substring(0, indexOf+1));
                            Dimension preferredSize = l.getPreferredSize();
                            this.add(l);
                            l.setBounds(r.x, r.y + (2*(i-1))*r.height, preferredSize.width, preferredSize.height);
                            Rectangle bounds = jname.getBounds();
                            s = NewDevArr[i].substring(indexOf+1);
                            if(s.contains(","))
                            {
                                int index = s.indexOf(",");
                                s = s.substring(0, index);
                            }
                            if(s.contains("\""))
                            {
                                int index = s.indexOf("\"");
                                s = s.substring(index+1, s.lastIndexOf("\""));
                            }
                            TextField tf = new TextField(s);
                            tf.setBounds(r.x + preferredSize.width + 10, bounds.y + (2*(i-1))*r.height, this.getBounds().width - r.x - preferredSize.width - 30, bounds.height);
                            this.add(tf);
                            ParamArr.add(tf);
                        }
                        else
                        {
                            l = new JLabel(NewDevArr[i]);
                            Dimension preferredSize = l.getPreferredSize();
                            l.setBounds(r.x, r.y + (2*(i-1))*r.height, preferredSize.width, preferredSize.height);
                            this.add(l);
                            ParamArr.add(null);
                        }
                    }
                    else
                    {
                        l = new JLabel(NewDevArr[i]);
                        Dimension preferredSize = l.getPreferredSize();
                        l.setBounds(r.x, r.y + (2*(i-1))*r.height, preferredSize.width, preferredSize.height);
                        this.add(l);
                        ParamArr.add(null);
                    }
                }
            }
            else if(position == -1) //new
            {
                for(int i = 1; i < NewDevArr.length; i++)
                {
                    if(NewDevArr[i].contains("\\s"))
                    {
                        int indexOf = NewDevArr[i].indexOf("\\s");
                        l = new JLabel(NewDevArr[i].substring(0, indexOf));
                        Dimension preferredSize = l.getPreferredSize();
                        l.setBounds(r.x, r.y + (2*i)*r.height, preferredSize.width, preferredSize.height);
                        this.add(l);
                        Rectangle bounds = jname.getBounds();
                        TextField tf = new TextField("");
                        tf.setBounds(r.x + preferredSize.width + 10, bounds.y + (2*i)*r.height, this.getBounds().width - r.x - preferredSize.width - 30, bounds.height);
                        this.add(tf);
                        ParamArr.add(tf);
                    }
                    else if(NewDevArr[i].contains("\\i"))
                    {
                        int indexOf = NewDevArr[i].indexOf("\\i");
                        l = new JLabel(NewDevArr[i].substring(0, indexOf));
                        Dimension preferredSize = l.getPreferredSize();
                        l.setBounds(r.x, r.y + (2*i)*r.height, preferredSize.width, preferredSize.height);
                        this.add(l);
                        Rectangle bounds = jname.getBounds();
                        TextField tf = new TextField("");
                        tf.setBounds(r.x + preferredSize.width + 10, bounds.y + (2*i)*r.height, this.getBounds().width - r.x - preferredSize.width - 30, bounds.height);
                        this.add(tf);
                        ParamArr.add(tf);
                    }
                    else if(NewDevArr[i].contains("\\f"))
                    {
                        int indexOf = NewDevArr[i].indexOf("\\f");
                        l = new JLabel(NewDevArr[i].substring(0, indexOf));
                        Dimension preferredSize = l.getPreferredSize();
                        l.setBounds(r.x, r.y + (2*i)*r.height, preferredSize.width, preferredSize.height);
                        this.add(l);
                        Rectangle bounds = jname.getBounds();
                        TextField tf = new TextField("");
                        tf.setBounds(r.x + preferredSize.width + 10, bounds.y + (2*i)*r.height, this.getBounds().width - r.x - preferredSize.width - 30, bounds.height);
                        this.add(tf);
                        ParamArr.add(tf);
                    }
                    else
                    {
                        l = new JLabel(NewDevArr[i]);
                        Dimension preferredSize = l.getPreferredSize();
                        l.setBounds(r.x, r.y + (2*i)*r.height, preferredSize.width, preferredSize.height);
                        this.add(l);
                        ParamArr.add(null);
                    }
                }
            }
            else    //edit
            {
                jHeadLabel.setText("Edit a device");
                String get = myParent.DeviceList.get(position) + "}\n";
                NewDevArr = get.split("\n");
                int indexOf = NewDevArr[1].indexOf("\"");
                String s = NewDevArr[1].substring(indexOf+1, NewDevArr[1].length());
                indexOf = s.indexOf("\"");
                s = s.substring(0, indexOf);
                OldName = s;
                jname.setText(s);
                ParamArr.add(null);
                for(int i = 2; i < NewDevArr.length; i++)
                {
                    if(NewDevArr[i].contains(":"))
                    {
                        if(!NewDevArr[i].contains("["))
                        {
                            indexOf = NewDevArr[i].indexOf(":");
                            l = new JLabel(NewDevArr[i].substring(0, indexOf+1));
                            Dimension preferredSize = l.getPreferredSize();
                            this.add(l);
                            l.setBounds(r.x, r.y + (2*(i-1))*r.height, preferredSize.width, preferredSize.height);
                            Rectangle bounds = jname.getBounds();
                            s = NewDevArr[i].substring(indexOf+1);
                            if(s.contains(","))
                            {
                                int index = s.indexOf(",");
                                s = s.substring(0, index);
                            }
                            if(s.contains("\""))
                            {
                                int index = s.indexOf("\"");
                                s = s.substring(index+1, s.lastIndexOf("\""));
                            }
                            TextField tf = new TextField(s);
                            tf.setBounds(r.x + preferredSize.width + 10, bounds.y + (2*(i-1))*r.height, this.getBounds().width - r.x - preferredSize.width - 30, bounds.height);
                            this.add(tf);
                            ParamArr.add(tf);
                        }
                        else
                        {
                            l = new JLabel(NewDevArr[i]);
                            Dimension preferredSize = l.getPreferredSize();
                            l.setBounds(r.x, r.y + (2*(i-1))*r.height, preferredSize.width, preferredSize.height);
                            this.add(l);
                            ParamArr.add(null);
                        }
                    }
                    else
                    {
                        l = new JLabel(NewDevArr[i]);
                        Dimension preferredSize = l.getPreferredSize();
                        l.setBounds(r.x, r.y + (2*(i-1))*r.height, preferredSize.width, preferredSize.height);
                        this.add(l);
                        ParamArr.add(null);
                    }
                }
            }
            Dimension preferredSize = this.getPreferredSize();
            this.setBounds(myParent.getBounds().x, myParent.getBounds().y, preferredSize.width, l.getBounds().y + 7*l.getBounds().height);
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewDevice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewDevice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewDevice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewDevice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewDevice().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jCancel;
    private javax.swing.JLabel jHeadLabel;
    private javax.swing.JLabel jNameLabel;
    private javax.swing.JButton jOK;
    private javax.swing.JTextField jname;
    // End of variables declaration//GEN-END:variables
}
