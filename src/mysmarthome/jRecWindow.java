/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mysmarthome;

import java.awt.Rectangle;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

/**
 *
 * @author ktams
 */
public class jRecWindow extends javax.swing.JFrame {

    public String Text = "";
    Config myParent;
    public boolean Running = false;
    public ArrayList<String> supress = null;

    /**
     * Creates new form jRecWindow
     */
    public jRecWindow() {
        initComponents();
    }

    jRecWindow(Config aThis) {
        myParent = aThis;
        initComponents();
        this.setVisible(true);
        ImageIcon II = new ImageIcon(getClass().getResource("pictures/Home.jpg"));
        this.setIconImage(II.getImage());
        Rectangle bounds = myParent.getBounds();
        bounds.x += 20;
        bounds.y += 20;
        bounds.height = this.getPreferredSize().height;
        bounds.width = this.getPreferredSize().width;
        this.setBounds(bounds);
        this.setTitle("pilight-receive output");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jRecOutput = new javax.swing.JTextArea();
        jStop = new javax.swing.JButton();
        jOK = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jSupressList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jStart = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jRecOutput.setColumns(20);
        jRecOutput.setRows(5);
        jScrollPane1.setViewportView(jRecOutput);

        jStop.setText("Stop");
        jStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStopActionPerformed(evt);
            }
        });

        jOK.setText("OK");
        jOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOKActionPerformed(evt);
            }
        });

        jSupressList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "nothing", "alecto_ws1700", "arping", "bmp180", "brennstuhl", "coco_switch", "cpu_temp", "datetime", "dht11", "dht22", "elro_300_switch", "elro_400_switch", "elro_800_contact", "elro_800_switch", "ev1527", "ev1527_contact", "intertechno_old", "intertechno_switch", "kaku_contact", "kaku_motion", "kaku_switch", "ping", "openweathermap", "rsl366", "sunriseset", "wunderground" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jSupressList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSupressListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jSupressList);

        jLabel2.setText("Suppress output of protocol");

        jStart.setText("Start");
        jStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(128, 128, 128)
                            .addComponent(jOK, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jStop, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jStart, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jStop, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jOK))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void AddTextLine(String str)
    {
        jRecOutput.append("\n" + str);
        jRecOutput.setCaretPosition(jRecOutput.getText().length());
    }

    private void jOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOKActionPerformed
        Running = false;
        this.dispose();
    }//GEN-LAST:event_jOKActionPerformed

    private void jStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStartActionPerformed
        
        
        Thread pilightReceive = new Thread()
        {
            public void run()
            {
                AddTextLine("starting pilight-receive...\n");
                AddTextLine("It works only on the same Linux-PC, where the pilight daemon runs!\n");
                AddTextLine("<control>click for more then one protocol, you don't want to see.\n");
                AddTextLine("It can be slow, so be patient ;-)\n");
                String[] args = new String[2];
                args[0] = "sudo";
                args[1] = "pilight-receive";               
                Running = true;
                
            try {
                    Process process = new ProcessBuilder(args).start(); 
                    Scanner s = new Scanner( process.getInputStream() ); 
                    String str = "";
                    while(Running)
                    {
                       while(!s.hasNextLine());
                       str += s.nextLine() + "\n";
                       if(str.contains("}\n"))
                        {
                            if(supress != null && !supress.isEmpty())
                            {
                                int i;
                                for(i = 0; i < supress.size(); i++)
                                {
                                    if(str.contains(supress.get(i)))
                                    {
                                        i = -1;
                                        break;
                                    }
                                }

                                if(i != -1)
                                {
                                    AddTextLine(str);
                                }
                            }
                            else
                            {
                                AddTextLine(str);
                            }
                            str = "";
                        }
                    }
                    s.close();
                    process.destroy();
                } catch (IOException ex) {
                    Logger.getLogger(Config.class.getName()).log(Level.SEVERE, null, ex);
                }                
           }
        };
        pilightReceive.start();            
        Running = true;
    }//GEN-LAST:event_jStartActionPerformed

    private void jStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStopActionPerformed
        Running = false;
        AddTextLine("\n\npilight-receive stopped.\n");
    }//GEN-LAST:event_jStopActionPerformed

    private void jSupressListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSupressListMouseClicked
        int selectedIndex = jSupressList.getSelectedIndex();
        List selectedValuesList = jSupressList.getSelectedValuesList();
        if(selectedIndex == 0)
        {
            selectedValuesList.clear();
            jSupressList.clearSelection();
        }
        supress = (ArrayList<String>) selectedValuesList;
    }//GEN-LAST:event_jSupressListMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jRecWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jRecWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jRecWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jRecWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jRecWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jOK;
    public javax.swing.JTextArea jRecOutput;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jStart;
    private javax.swing.JButton jStop;
    private javax.swing.JList jSupressList;
    // End of variables declaration//GEN-END:variables
}
