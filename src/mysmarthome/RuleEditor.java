/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mysmarthome;

import java.awt.Dimension;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import static mysmarthome.Config.gsConfigDirectory;

/**
 *
 * @author ktams
 */
public class RuleEditor extends javax.swing.JFrame {

    Rules myParent;
    int Index;
    String strAllowedValues;
    String[] DevArr;
    static final String[] times = { "MILLISECOND", "SECOND", "MINUTE", "HOUR", "DAY" };
    static final String[] sunrise_set = {".sunrise", ".sunset", "set", "rise"};
    static final String[] date_time = {".year", ".month", ".day", ".weekday", ".hour", ".minute", ".second"};
    static final String[] operators = {" == ", " != ", " > ", " < ", " >= ", " <= "};
    static final String[] def_operators = {".state", ".dimlevel", ".label"};
    static final String[] def_vals = {"on","off","closed","opened","running","stopped"};
    static final String[] color = {"black", "white", "green", "red", "blue", "yellow"};
    /**
     * Creates new form RuleEditor
     */
    public RuleEditor() {
        initComponents();
        this.setVisible(true);
    }

    RuleEditor(Rules aThis, int selectedIndex) {
        myParent = aThis;
        Index = selectedIndex;
        initComponents();
        ImageIcon II = new ImageIcon(getClass().getResource("pictures/Home.jpg"));
        this.setIconImage(II.getImage());
        if(Index == -1)
        {
            jRuleName.setEditable(true);
        }
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jOK = new javax.swing.JButton();
        jCancel = new javax.swing.JButton();
        jRuleName = new javax.swing.JTextField();
        jOff = new javax.swing.JRadioButton();
        jOn = new javax.swing.JRadioButton();
        jDeviceList = new javax.swing.JComboBox();
        jState = new javax.swing.JButton();
        jDevice = new javax.swing.JButton();
        jTo = new javax.swing.JButton();
        jAfter = new javax.swing.JButton();
        jTime = new javax.swing.JButton();
        jAnd = new javax.swing.JButton();
        jOr = new javax.swing.JButton();
        jFor = new javax.swing.JButton();
        jIS = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jRuleIF = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jAction = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jIN = new javax.swing.JButton();
        jFROM = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jRuleTHEN = new javax.swing.JTextField();
        jDeviceList1 = new javax.swing.JComboBox();
        jAndThen = new javax.swing.JButton();
        jOrThen = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("mysmarthome/Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("RuleEditor.jLabel1.text")); // NOI18N

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText(bundle.getString("RuleEditor.jLabel2.text")); // NOI18N

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText(bundle.getString("RuleEditor.jLabel3.text")); // NOI18N

        jOK.setText(bundle.getString("RuleEditor.jOK.text")); // NOI18N
        jOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOKActionPerformed(evt);
            }
        });

        jCancel.setText(bundle.getString("RuleEditor.jCancel.text")); // NOI18N
        jCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCancelActionPerformed(evt);
            }
        });

        jRuleName.setEditable(false);
        jRuleName.setText(bundle.getString("RuleEditor.jRuleName.text")); // NOI18N

        buttonGroup1.add(jOff);
        jOff.setText(bundle.getString("RuleEditor.jOff.text")); // NOI18N

        buttonGroup1.add(jOn);
        jOn.setSelected(true);
        jOn.setText(bundle.getString("RuleEditor.jOn.text")); // NOI18N

        jDeviceList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeviceListActionPerformed(evt);
            }
        });

        jState.setText(bundle.getString("RuleEditor.jState.text")); // NOI18N
        jState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStateActionPerformed(evt);
            }
        });

        jDevice.setText(bundle.getString("RuleEditor.jDevice.text")); // NOI18N
        jDevice.setEnabled(false);
        jDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeviceActionPerformed(evt);
            }
        });

        jTo.setText(bundle.getString("RuleEditor.jTo.text")); // NOI18N
        jTo.setEnabled(false);
        jTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToActionPerformed(evt);
            }
        });

        jAfter.setText(bundle.getString("RuleEditor.jAfter.text")); // NOI18N
        jAfter.setEnabled(false);
        jAfter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAfterActionPerformed(evt);
            }
        });

        jTime.setText(bundle.getString("RuleEditor.jTime.text")); // NOI18N
        jTime.setEnabled(false);
        jTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTimeActionPerformed(evt);
            }
        });

        jAnd.setText(bundle.getString("RuleEditor.jAnd.text")); // NOI18N
        jAnd.setEnabled(false);
        jAnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAndActionPerformed(evt);
            }
        });

        jOr.setText(bundle.getString("RuleEditor.jOr.text")); // NOI18N
        jOr.setEnabled(false);
        jOr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrActionPerformed(evt);
            }
        });

        jFor.setText(bundle.getString("RuleEditor.jFor.text")); // NOI18N
        jFor.setEnabled(false);
        jFor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jForActionPerformed(evt);
            }
        });

        jIS.setText(bundle.getString("RuleEditor.jIS.text")); // NOI18N
        jIS.setEnabled(false);
        jIS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jISActionPerformed(evt);
            }
        });

        jRuleIF.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                jRuleIFCaretPositionChanged(evt);
            }
        });
        jRuleIF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRuleIFActionPerformed(evt);
            }
        });
        jScrollPane1.setViewportView(jRuleIF);

        jLabel4.setText(bundle.getString("RuleEditor.jLabel4.text")); // NOI18N

        jAction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "switch", "toggle", "program", "dim", "pushover", "pushbullit", "sendmail", "label" }));
        jAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jActionActionPerformed(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText(bundle.getString("RuleEditor.jLabel5.text")); // NOI18N

        jIN.setText(bundle.getString("RuleEditor.jIN.text")); // NOI18N
        jIN.setEnabled(false);
        jIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jINActionPerformed(evt);
            }
        });

        jFROM.setText(bundle.getString("RuleEditor.jFROM.text")); // NOI18N
        jFROM.setEnabled(false);
        jFROM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFROMActionPerformed(evt);
            }
        });

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText(bundle.getString("RuleEditor.jLabel6.text")); // NOI18N

        jRuleTHEN.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                jRuleTHENCaretPositionChanged(evt);
            }
        });
        jRuleTHEN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRuleTHENActionPerformed(evt);
            }
        });
        jScrollPane2.setViewportView(jRuleTHEN);

        jDeviceList1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeviceList1ActionPerformed(evt);
            }
        });

        jAndThen.setText(bundle.getString("RuleEditor.jAndThen.text")); // NOI18N
        jAndThen.setEnabled(false);
        jAndThen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAndThenActionPerformed(evt);
            }
        });

        jOrThen.setText(bundle.getString("RuleEditor.jOrThen.text")); // NOI18N
        jOrThen.setEnabled(false);
        jOrThen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrThenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRuleName))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jDeviceList, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jState, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jIS, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jAnd, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jOr, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jAction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jDeviceList1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jDevice, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jAfter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jFor, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(107, 107, 107))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jOrThen, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jAndThen, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jIN, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTime, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jFROM, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jOK, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCancel)
                        .addGap(152, 152, 152)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jOff)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jOn)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jRuleName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jDeviceList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jState)
                    .addComponent(jAnd)
                    .addComponent(jOr)
                    .addComponent(jIS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jAction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDevice)
                    .addComponent(jFor)
                    .addComponent(jAfter)
                    .addComponent(jTime)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDeviceList1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFROM)
                    .addComponent(jIN)
                    .addComponent(jTo)
                    .addComponent(jAndThen)
                    .addComponent(jOrThen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jOK)
                    .addComponent(jCancel)
                    .addComponent(jLabel3)
                    .addComponent(jOff)
                    .addComponent(jOn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOKActionPerformed
        boolean selected = jOff.isSelected();
        int i = 1;
        if(selected == true)
            i = 0;
        if(Index != -1)
        {
            String str = myParent.myParent.RulesList.get(Index);
            String[] strA = str.split("\"rule\":");
            String[] split = strA[1].split(",");
            str = strA[0] + "\"rule\": \"IF " + jRuleIF.getText() + " THEN " + jRuleTHEN.getText() + "\",";
            int indexOf = split[1].indexOf(":");
            String s = split[1].substring(indexOf+3);
            str += split[1].substring(0, indexOf+2) + i + s;
            myParent.myParent.RulesList.set(Index, str);
            myParent.RuleslistenModell.set(Index+1, str);
        }
        else
        {
            String str = "\n\t\t\"" + jRuleName.getText() + "\": {\n\t\t\"rule\": \"IF " + jRuleIF.getText() + " THEN " + jRuleTHEN.getText() + "\",\n";
            str += "\t\t\t\"active\": " + i +"\n\t\t";
            myParent.myParent.RulesList.add(str);
            myParent.RuleslistenModell.addElement(str);
        }
        this.dispose();
    }//GEN-LAST:event_jOKActionPerformed

    private void jCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_jCancelActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
         byte[] b;
        strAllowedValues = "\n";
        try {
            FileInputStream fileInputStream = new FileInputStream(gsConfigDirectory + "AllowedValues.txt");
            File f = new File(gsConfigDirectory + "AllowedValues.txt");
            long l = f.length();
            b = new byte[(int)l];
            fileInputStream.read(b);
            strAllowedValues = new String(b);
        } catch (FileNotFoundException ex) {
            File f = new File(Config.gsConfigDirectory + "AllowedValues.txt");
        } catch (IOException ex) {
            Logger.getLogger(RuleEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
        String str;
        if(Index != -1)
        {
            str = myParent.myParent.RulesList.get(Index);
            int indexOf = str.indexOf("\"");
            str = str.substring(indexOf+1, str.length());
            indexOf = str.indexOf(":");
            jRuleName.setText(str.substring(0, indexOf-1));
            indexOf = str.indexOf("rule");
            str = str.substring(indexOf + 6, str.length());
            indexOf = str.indexOf("\"");
            str = str.substring(indexOf + 1, str.length());
            indexOf = str.indexOf("IF");
            str = str.substring(indexOf + 3, str.length());
            indexOf = str.indexOf(" THEN");
            jRuleIF.setText(str.substring(0,indexOf));
            str = str.substring(indexOf + 6, str.length());
            indexOf = str.indexOf("\"");
            jRuleTHEN.setText(str.substring(0,indexOf));
            indexOf = str.indexOf("active");
            str = str.substring(indexOf, str.length());
            if(str.contains("1"))
            {
                jOn.setSelected(true);
                jOff.setSelected(false);
            }
            else
            {
                jOff.setSelected(true);
                jOn.setSelected(false);
            }
            jAnd.setEnabled(true);
            jOr.setEnabled(true);
            jAndThen.setEnabled(true);
            jOrThen.setEnabled(true);
            jIS.setEnabled(true);
            jTo.setEnabled(true);
            jAction.setEnabled(true);
        }
        Dimension preferredSize = this.getPreferredSize();
        this.setBounds(myParent.getBounds().x, myParent.getBounds().y, preferredSize.width, preferredSize.height);
        myParent.myParent.DeviceList.stream().forEach((DeviceList) -> {
            jDeviceList.addItem(DeviceList.substring(DeviceList.indexOf("\"")+1, DeviceList.indexOf("\":")));
        });
    }//GEN-LAST:event_formWindowOpened

    private void jToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToActionPerformed
        int caretPosition = jRuleTHEN.getCaretPosition();
        String text = jTo.getText();
        String str = "";
        if(text.equals("TO"))
        {
            int selectedIndex = jDeviceList.getSelectedIndex();
//            String selectedItem = myParent.myParent.DeviceList.get(selectedIndex);
            String selectedItem = (String) jDeviceList1.getItemAt(selectedIndex);
            for (String s : myParent.myParent.DeviceList) {
                if(s.contains(selectedItem))
                {
                    selectedItem = s;
                    break;
                }
            }
            int indexOf = selectedItem.indexOf("]");
            selectedItem = selectedItem.substring(selectedItem.indexOf("["), indexOf);
            selectedItem = selectedItem.substring(selectedItem.indexOf("\"")+1, selectedItem.lastIndexOf("\""));
            if(strAllowedValues.contains(selectedItem))
            {
                str = strAllowedValues.substring(strAllowedValues.indexOf(selectedItem) + selectedItem.length(), strAllowedValues.length());
                str = str.substring(0, str.indexOf("["));
                String[] strArr = str.split("\n");
                str = "";
                int i;
                for ( i = 0; i < strArr[i].length(); i++) {
                    if (strArr[i].contains("*state*")) {
                        {
                            String[] sArr = new String[2];
                            sArr[0] = strArr[i+1];
                            sArr[1] = strArr[i+2];
                            str = (String) JOptionPane.showInputDialog(this, "Available values", "Select a value", JOptionPane.QUESTION_MESSAGE, null, sArr, sArr[0]);
                            if(str == null)
                            {
                                return;
                            }
                            break;
                       }
                    }
                    if (strArr[i].contains("*label*")) {
                        {
                            JOptionPane.showMessageDialog(this, "Please type in your text for the label.");
                            break;
                       }
                    }
                }
            }
        }
        jRuleTHEN.setText(jRuleTHEN.getText().substring(0, caretPosition) + " " + text + " " + str + jRuleTHEN.getText().substring(caretPosition, jRuleTHEN.getText().length()));
        jRuleTHEN.setCaretPosition(caretPosition + text.length() + str.length() + 2);
        jRuleTHEN.requestFocus();
    }//GEN-LAST:event_jToActionPerformed

    private void jStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStateActionPerformed
        int caretPosition = jRuleIF.getCaretPosition();
        int selectedIndex = jDeviceList.getSelectedIndex();
        String selectedItem = myParent.myParent.DeviceList.get(selectedIndex);
        int indexOf = selectedItem.indexOf("]");
        selectedItem = selectedItem.substring(selectedItem.indexOf("["), indexOf);
        selectedItem = selectedItem.substring(selectedItem.indexOf("\"")+1, selectedItem.lastIndexOf("\""));
        String str;
        if(strAllowedValues.contains(selectedItem))
        {
            str = strAllowedValues.substring(strAllowedValues.indexOf(selectedItem) + selectedItem.length(), strAllowedValues.length());
            str = str.substring(0, str.indexOf("["));
            String[] strArr = str.split("\n");
            str = "";
            for (String strArr1 : strArr) {
                if (strArr1.contains("*")) {
                    str += ".";
                    str += strArr1.substring(strArr1.indexOf("*") + 1, strArr1.lastIndexOf("*"));
                    str += "\n";
                }
            }
            DevArr = strArr;
            strArr = str.split("\n");
            str = (String) JOptionPane.showInputDialog(this, "Available values", "Select a value", JOptionPane.QUESTION_MESSAGE, null, strArr, strArr[0]);
            if(str == null)
            {
                DevArr = null;
                return;
            }
            String s = "";
            for (String DevArr1 : DevArr) {
                s += DevArr1 + "\n";
            }
            indexOf = s.indexOf(str.substring(1, str.length())) + str.length();
            s = s.substring(indexOf);
            s = s.substring(s.indexOf("\n")+1);
            indexOf = s.indexOf("*");
            if(indexOf != -1) s = s.substring(0, indexOf);
            DevArr = s.split("\n");
        }
        else
        {
            DevArr = null;
            str = (String) JOptionPane.showInputDialog(this, "Defaults", "Select a default value", JOptionPane.QUESTION_MESSAGE, null, def_operators, def_operators[0]);
            if(str == null)
                str = "";
        }
        selectedItem = (String) jDeviceList.getSelectedItem() + str;
        jRuleIF.setText(jRuleIF.getText().substring(0, caretPosition) + " " + selectedItem + " " + jRuleIF.getText().substring(caretPosition, jRuleIF.getText().length()));
        jRuleIF.setCaretPosition(caretPosition + selectedItem.length() + 2);
        jRuleIF.requestFocus();
        jAnd.setEnabled(true);
        jOr.setEnabled(true);
        jIS.setEnabled(true);
    }//GEN-LAST:event_jStateActionPerformed

    private void jAndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAndActionPerformed
        int caretPosition = jRuleIF.getCaretPosition();
        jRuleIF.setText(jRuleIF.getText().substring(0, caretPosition) + " AND " + jRuleIF.getText().substring(caretPosition, jRuleIF.getText().length()));
        jRuleIF.setCaretPosition(caretPosition + " AND ".length());
        jRuleIF.requestFocus();
    }//GEN-LAST:event_jAndActionPerformed

    private void jOrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrActionPerformed
        int caretPosition = jRuleIF.getCaretPosition();
        jRuleIF.setText(jRuleIF.getText().substring(0, caretPosition) + " OR " + jRuleIF.getText().substring(caretPosition, jRuleIF.getText().length()));
        jRuleIF.setCaretPosition(caretPosition + " OR ".length());
        jRuleIF.requestFocus();
    }//GEN-LAST:event_jOrActionPerformed

    private void jDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeviceActionPerformed
        int caretPosition = jRuleTHEN.getCaretPosition();
        String selectedItem = (String) jDeviceList1.getSelectedItem();
        jRuleTHEN.setText(jRuleTHEN.getText().substring(0, caretPosition) + " DEVICE " + selectedItem + " " + jRuleTHEN.getText().substring(caretPosition, jRuleTHEN.getText().length()));
        jRuleTHEN.setCaretPosition(caretPosition + selectedItem.length() + " DEVICE ".length());
        jTo.setEnabled(true);
        jRuleTHEN.requestFocus();
    }//GEN-LAST:event_jDeviceActionPerformed

    private void jForActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jForActionPerformed
        int caretPosition = jRuleTHEN.getCaretPosition();
        String text = jFor.getText();
        jRuleTHEN.setText(jRuleTHEN.getText().substring(0, caretPosition) + " " + text + " " + jRuleTHEN.getText().substring(caretPosition, jRuleTHEN.getText().length()));
        jRuleTHEN.setCaretPosition(caretPosition + text.length()+2);
        jRuleTHEN.requestFocus();
    }//GEN-LAST:event_jForActionPerformed

    private void jAfterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAfterActionPerformed
        int caretPosition = jRuleTHEN.getCaretPosition();
        String text = jAfter.getText();
        jRuleTHEN.setText(jRuleTHEN.getText().substring(0, caretPosition) + " " + text + " " + jRuleTHEN.getText().substring(caretPosition, jRuleTHEN.getText().length()));
        jRuleTHEN.setCaretPosition(caretPosition + text.length()+2);
        jRuleTHEN.requestFocus();
    }//GEN-LAST:event_jAfterActionPerformed

    private void jTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTimeActionPerformed
        String TimeBase = (String) JOptionPane.showInputDialog(this, "Choose time base", "Time base", JOptionPane.QUESTION_MESSAGE, null, times, times[2]);
        if(TimeBase != null)
        {
            int caretPosition = jRuleTHEN.getCaretPosition();
            jRuleTHEN.setText(jRuleTHEN.getText().substring(0, caretPosition) + " " + TimeBase + " " + jRuleTHEN.getText().substring(caretPosition, jRuleTHEN.getText().length()));
            jRuleTHEN.setCaretPosition(caretPosition + TimeBase.length()+2);
        }
        jRuleTHEN.requestFocus();
    }//GEN-LAST:event_jTimeActionPerformed

    private void jRuleIFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRuleIFActionPerformed
        
    }//GEN-LAST:event_jRuleIFActionPerformed

    private void jISActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jISActionPerformed
        int caretPosition = jRuleIF.getCaretPosition();
        String str;
        if(DevArr != null)
        {
            str = (String) JOptionPane.showInputDialog(this, "Available values", "Select a value", JOptionPane.QUESTION_MESSAGE, null, DevArr, DevArr[0]);
        }
        else
        {
            str = (String) JOptionPane.showInputDialog(this, "Defaults", "Select a default value", JOptionPane.QUESTION_MESSAGE, null, def_vals, def_vals[0]);
        }
        if(str == null)
            str = "";
        jRuleIF.setText(jRuleIF.getText().substring(0, caretPosition) + " IS " + str + jRuleIF.getText().substring(caretPosition, jRuleIF.getText().length()));
        jRuleIF.setCaretPosition(caretPosition + " IS ".length() + str.length());
        jRuleIF.requestFocus();
    }//GEN-LAST:event_jISActionPerformed

    private void jRuleIFCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jRuleIFCaretPositionChanged
        
    }//GEN-LAST:event_jRuleIFCaretPositionChanged

    private void jDeviceListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeviceListActionPerformed
    }//GEN-LAST:event_jDeviceListActionPerformed

    private void jActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jActionActionPerformed
        int selectedIndex = jAction.getSelectedIndex();
        
        String selectedItem;
        switch(selectedIndex)
        {
            case 0: //switch
                int caretPosition = jRuleTHEN.getCaretPosition();
                jRuleTHEN.setText(jRuleTHEN.getText().substring(0, caretPosition) + " switch " + jRuleTHEN.getText().substring(caretPosition, jRuleTHEN.getText().length()));
                jRuleTHEN.setCaretPosition(caretPosition + " switch ".length());
                jRuleTHEN.requestFocus();
                jDevice.setEnabled(true);
                jTo.setText("TO");
                jTo.setEnabled(false);
                jFor.setText("FOR");
                jFor.setEnabled(true);
                jAfter.setText("AFTER");
                jAfter.setEnabled(true);
                jTime.setText("Time?");
                jTime.setEnabled(true);
                jIN.setText(" ");
                jIN.setEnabled(false);
                jFROM.setText(" ");
                jFROM.setEnabled(false);
                
                int itemCount = jDeviceList1.getItemCount();
                for (String DeviceList : myParent.myParent.DeviceList) {
                    selectedItem = DeviceList;
                    if(selectedItem.contains("state"))
                        jDeviceList1.addItem(selectedItem.substring(selectedItem.indexOf("\"")+1, selectedItem.indexOf("\":")));
                }
                for(int i=0;i<itemCount;i++){
                    jDeviceList1.removeItemAt(0);
                }                
                break;
                
            case 1: //toggle
                caretPosition = jRuleTHEN.getCaretPosition();
                jRuleTHEN.setText(jRuleTHEN.getText().substring(0, caretPosition) + " toggle " + jRuleTHEN.getText().substring(caretPosition, jRuleTHEN.getText().length()));
                jRuleTHEN.setCaretPosition(caretPosition + " toggle ".length());
                jRuleTHEN.requestFocus();
                jDevice.setEnabled(true);
                jTo.setText("BETWEEN");
                jTo.setEnabled(false);
                jFor.setText("AND");
                jFor.setEnabled(true);
                jAfter.setText(" ");
                jAfter.setEnabled(false);
                jTime.setText(" ");
                jTime.setEnabled(false);
                jIN.setText(" ");
                jIN.setEnabled(false);
                jFROM.setText(" ");
                jFROM.setEnabled(false);
                
                itemCount = jDeviceList1.getItemCount();
                for (String DeviceList : myParent.myParent.DeviceList) {
                    selectedItem = DeviceList;
                    if(selectedItem.contains("state"))
                        jDeviceList1.addItem(selectedItem.substring(selectedItem.indexOf("\"")+1, selectedItem.indexOf("\":")));
                }
                for(int i=0; i < itemCount; i++){
                    jDeviceList1.removeItemAt(0);
                }                
                break;
                
            case 2: //program
                caretPosition = jRuleTHEN.getCaretPosition();
                jRuleTHEN.setText(jRuleTHEN.getText().substring(0, caretPosition) + " switch " + jRuleTHEN.getText().substring(caretPosition, jRuleTHEN.getText().length()));
                jRuleTHEN.setCaretPosition(caretPosition + " switch ".length());
                jRuleTHEN.requestFocus();
                jDevice.setEnabled(true);
                jTo.setText("TO");
                jTo.setEnabled(false);
                jFor.setText("running");
                jFor.setEnabled(true);
                jAfter.setText("stopped");
                jAfter.setEnabled(true);
                jTime.setText(" ");
                jTime.setEnabled(false);
                jIN.setText(" ");
                jIN.setEnabled(false);
                jFROM.setText(" ");
                jFROM.setEnabled(false);
                
                itemCount = jDeviceList1.getItemCount();
                for (String DeviceList : myParent.myParent.DeviceList) {
                    selectedItem = DeviceList;
                    if(selectedItem.contains("program\" ],"))
                        jDeviceList1.addItem(selectedItem.substring(selectedItem.indexOf("\"")+1, selectedItem.indexOf("\":")));
                }
                for(int i=0;i<itemCount;i++){
                    jDeviceList1.removeItemAt(0);
                }                
                break;
                
            case 3: //dim
                caretPosition = jRuleTHEN.getCaretPosition();
                jRuleTHEN.setText(jRuleTHEN.getText().substring(0, caretPosition) + " dim " + jRuleTHEN.getText().substring(caretPosition, jRuleTHEN.getText().length()));
                jRuleTHEN.setCaretPosition(caretPosition + " dim ".length());
                jRuleTHEN.requestFocus();
                jDevice.setEnabled(true);
                jTo.setText("TO");
                jTo.setEnabled(false);
                jFor.setText("FOR");
                jFor.setEnabled(true);
                jAfter.setText("AFTER");
                jAfter.setEnabled(true);
                jTime.setText("Time?");
                jTime.setEnabled(true);
                jIN.setText("IN");
                jIN.setEnabled(true);
                jFROM.setText("FROM");
                jFROM.setEnabled(true);
                
                itemCount = jDeviceList1.getItemCount();
                for (String DeviceList : myParent.myParent.DeviceList) {
                    selectedItem = DeviceList;
                    if(selectedItem.contains("dimmer\" ],"))
                        jDeviceList1.addItem(selectedItem.substring(selectedItem.indexOf("\"")+1, selectedItem.indexOf("\":")));
                }
                for(int i=0;i<itemCount;i++){
                    jDeviceList1.removeItemAt(0);
                }                
                break;
                
            case 4: //pushover
                caretPosition = jRuleTHEN.getCaretPosition();
                jRuleTHEN.setText(jRuleTHEN.getText().substring(0, caretPosition) + " pushover " + jRuleTHEN.getText().substring(caretPosition, jRuleTHEN.getText().length()));
                jRuleTHEN.setCaretPosition(caretPosition + " pushover ".length());
                jRuleTHEN.requestFocus();
                jDevice.setEnabled(false);
                jTo.setText(" ");
                jTo.setEnabled(false);
                jFor.setText("TITLE");
                jFor.setEnabled(true);
                jAfter.setText("MESSAGE");
                jAfter.setEnabled(true);
                jTime.setText(" ");
                jTime.setEnabled(false);
                jIN.setText("TOKEN");
                jIN.setEnabled(true);
                jFROM.setText("USER");
                jFROM.setEnabled(true);
                break;
                
            case 5: //pushbullet
                caretPosition = jRuleTHEN.getCaretPosition();
                jRuleTHEN.setText(jRuleTHEN.getText().substring(0, caretPosition) + " pushbullet " + jRuleTHEN.getText().substring(caretPosition, jRuleTHEN.getText().length()));
                jRuleTHEN.setCaretPosition(caretPosition + " pushbullet ".length());
                jRuleTHEN.requestFocus();
                jDevice.setEnabled(false);
                jTo.setText(" ");
                jTo.setEnabled(false);
                jFor.setText("TITLE");
                jFor.setEnabled(true);
                jAfter.setText("BODY");
                jAfter.setEnabled(true);
                jTime.setText(" ");
                jTime.setEnabled(false);
                jIN.setText("TOKEN");
                jIN.setEnabled(true);
                jFROM.setText("TYPE");
                jFROM.setEnabled(true);
                break;
                
            case 6: //sendmail
                caretPosition = jRuleTHEN.getCaretPosition();
                jRuleTHEN.setText(jRuleTHEN.getText().substring(0, caretPosition) + " pushbullet " + jRuleTHEN.getText().substring(caretPosition, jRuleTHEN.getText().length()));
                jRuleTHEN.setCaretPosition(caretPosition + " pushbullet ".length());
                jRuleTHEN.requestFocus();
                jDevice.setEnabled(false);
                jTo.setText("TO");
                jTo.setEnabled(true);
                jFor.setText("SUBJECT");
                jFor.setEnabled(true);
                jAfter.setText("MESSAGE");
                jAfter.setEnabled(true);
                jTime.setText(" ");
                jTime.setEnabled(false);
                jIN.setText(" ");
                jIN.setEnabled(false);
                jFROM.setText(" ");
                jFROM.setEnabled(false);
                break;
                
            case 7: //label
                caretPosition = jRuleTHEN.getCaretPosition();
                jRuleTHEN.setText(jRuleTHEN.getText().substring(0, caretPosition) + " label " + jRuleTHEN.getText().substring(caretPosition, jRuleTHEN.getText().length()));
                jRuleTHEN.setCaretPosition(caretPosition + " label ".length());
                jRuleTHEN.requestFocus();
                jDevice.setEnabled(true);
                jTo.setText("TO");
                jTo.setEnabled(true);
                jFor.setText("FOR");
                jFor.setEnabled(true);
                jAfter.setText("AFTER");
                jAfter.setEnabled(true);
                jTime.setText("Time?");
                jTime.setEnabled(true);
                jIN.setText("COLOR");
                jIN.setEnabled(true);
                jFROM.setText(" ");
                jFROM.setEnabled(false);
                
                itemCount = jDeviceList1.getItemCount();
                for (String DeviceList : myParent.myParent.DeviceList) {
                    selectedItem = DeviceList;
                    if(selectedItem.contains("label\" ],"))
                        jDeviceList1.addItem(selectedItem.substring(selectedItem.indexOf("\"")+1, selectedItem.indexOf("\":")));
                }
                for(int i=0;i<itemCount;i++){
                    jDeviceList1.removeItemAt(0);
                }                
                break;
        }
        jState.setEnabled(false);
    }//GEN-LAST:event_jActionActionPerformed

    private void jINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jINActionPerformed
        int caretPosition = jRuleTHEN.getCaretPosition();
        String text = jIN.getText();
        String str = "";
        if(text.equals("COLOR"))
        {
            str = (String) JOptionPane.showInputDialog(this, "Colors", "Select a color", JOptionPane.QUESTION_MESSAGE, null, color, color[0]);
        }
        jRuleTHEN.setText(jRuleTHEN.getText().substring(0, caretPosition) + " " + text + " " + str + jRuleTHEN.getText().substring(caretPosition, jRuleTHEN.getText().length()));
        jRuleTHEN.setCaretPosition(caretPosition + text.length() + str.length() + 2);
        jRuleTHEN.requestFocus();
    }//GEN-LAST:event_jINActionPerformed

    private void jFROMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFROMActionPerformed
        int caretPosition = jRuleTHEN.getCaretPosition();
        String text = jFROM.getText();
        jRuleTHEN.setText(jRuleTHEN.getText().substring(0, caretPosition) + " " + text + " " + jRuleTHEN.getText().substring(caretPosition, jRuleTHEN.getText().length()));
        jRuleTHEN.setCaretPosition(caretPosition + text.length()+2);
        jRuleTHEN.requestFocus();
    }//GEN-LAST:event_jFROMActionPerformed

    private void jRuleTHENCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jRuleTHENCaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRuleTHENCaretPositionChanged

    private void jRuleTHENActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRuleTHENActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRuleTHENActionPerformed

    private void jDeviceList1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeviceList1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jDeviceList1ActionPerformed

    private void jAndThenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAndThenActionPerformed
        int caretPosition = jRuleTHEN.getCaretPosition();
        jRuleTHEN.setText(jRuleTHEN.getText().substring(0, caretPosition) + " AND " + jRuleTHEN.getText().substring(caretPosition, jRuleTHEN.getText().length()));
        jRuleTHEN.setCaretPosition(caretPosition + " AND ".length());
        jRuleTHEN.requestFocus();
    }//GEN-LAST:event_jAndThenActionPerformed

    private void jOrThenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrThenActionPerformed
        int caretPosition = jRuleTHEN.getCaretPosition();
        jRuleTHEN.setText(jRuleTHEN.getText().substring(0, caretPosition) + " OR " + jRuleTHEN.getText().substring(caretPosition, jRuleTHEN.getText().length()));
        jRuleTHEN.setCaretPosition(caretPosition + " OR ".length());
        jRuleTHEN.requestFocus();
    }//GEN-LAST:event_jOrThenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RuleEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RuleEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RuleEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RuleEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RuleEditor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox jAction;
    private javax.swing.JButton jAfter;
    private javax.swing.JButton jAnd;
    private javax.swing.JButton jAndThen;
    private javax.swing.JButton jCancel;
    private javax.swing.JButton jDevice;
    private javax.swing.JComboBox jDeviceList;
    private javax.swing.JComboBox jDeviceList1;
    private javax.swing.JButton jFROM;
    private javax.swing.JButton jFor;
    private javax.swing.JButton jIN;
    private javax.swing.JButton jIS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JButton jOK;
    private javax.swing.JRadioButton jOff;
    private javax.swing.JRadioButton jOn;
    private javax.swing.JButton jOr;
    private javax.swing.JButton jOrThen;
    private javax.swing.JTextField jRuleIF;
    private javax.swing.JTextField jRuleName;
    private javax.swing.JTextField jRuleTHEN;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jState;
    private javax.swing.JButton jTime;
    private javax.swing.JButton jTo;
    // End of variables declaration//GEN-END:variables
}
