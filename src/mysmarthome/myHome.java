/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mysmarthome;


import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.StringReader;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.NetworkInterface;
import java.net.Socket;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Enumeration;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JSlider;
import javax.swing.JTextField;
import javax.swing.Timer;

/**
 *
 * @author ktams
 */
 
public class myHome extends javax.swing.JFrame {

    PrintStream printStream = null;
    BufferedReader bufferedReader = null;
    String server = null;
    Socket socket = null;
    int port = 0;
    ImageIcon IIDaemon_aus = null;
    ImageIcon IIDaemon = null;
    ImageIcon Room = null;
    ArrayList<String> strRooms = new ArrayList<>();
    Image img = null;
    ArrayList myDevices = new ArrayList();      //all Devices
    private boolean bMustNotDeleteAgain = false;
    SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
    int nDay = 0;
    boolean bMustUpdate = false;
    boolean bHeartSent = false;

    private Color convertColorString(String labelColor) {
        switch(labelColor)
        {
            case "black":
                return Color.black;
                
            case "green":
                return Color.GREEN;
                
            case "red":
                return Color.red;
                
            case "blue":
                return Color.blue;
                
            case "yellow":
                return Color.yellow;
        }
        return Color.black;
    }


    enum piDevTypes {
	RAW,
	SWITCH,     //
	DIMMER,     //
	WEATHER,    //
	RELAY,      //
	SCREEN,
	CONTACT,    //
	PENDINGSW,
	DATETIME,   //
	XBMC,
	LIRC,
	WEBCAM,
	MOTION,
	DUSK,
	PING,
	LABEL       //
    } ;
                              
    static int PicWidth = 972;
    static int PicHeigth = 493;
                                
    static String  gsConfigDirectory = System.getProperty("user.home") + "/mySmartHome/";
    static String  gsConfigFilename  = System.getProperty("user.home") + "/mySmartHome/" + "myProps";
    
    String[] strConfig = null;
    
    
    /**
     * Creates new form myHome
     */
    public myHome() {
        initComponents();
        ImageIcon II = new ImageIcon(getClass().getResource("pictures/Home.jpg"));
        this.setIconImage(II.getImage());
        File f = new File(myHome.gsConfigDirectory + "daemon_off.jpg");
        if(f.exists())
            IIDaemon_aus = new ImageIcon(myHome.gsConfigDirectory + "daemon_off.jpg");
        else
        {
            f = new File(myHome.gsConfigDirectory + "daemon_off.png");
            if(f.exists())
                IIDaemon_aus = new ImageIcon(myHome.gsConfigDirectory + "daemon_off.png");
            else
                IIDaemon_aus = new ImageIcon(getClass().getResource("pictures/Dämon_aus.jpg"));
        }
        f = new File(myHome.gsConfigDirectory + "daemon_on.jpg");
        if(f.exists())
            IIDaemon = new ImageIcon(myHome.gsConfigDirectory + "daemon_on.jpg");
        else
        {
            f = new File(myHome.gsConfigDirectory + "daemon_on.png");
            if(f.exists())
                IIDaemon = new ImageIcon(myHome.gsConfigDirectory + "daemon_on.png");
            else
                IIDaemon = new ImageIcon(getClass().getResource("pictures/Dämon_ein.jpg"));
        }
    } 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jExit = new javax.swing.JButton();
        jDaemon = new javax.swing.JLabel();
        jTabbedPane = new javax.swing.JTabbedPane();
        jOverview = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jShowOverview = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jCPU = new javax.swing.JLabel();
        jRAM = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("mysmarthome/Bundle"); // NOI18N
        jExit.setText(bundle.getString("myHome.jExit.text")); // NOI18N
        jExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jExitActionPerformed(evt);
            }
        });

        jDaemon.setText(bundle.getString("myHome.jDaemon.text")); // NOI18N

        javax.swing.GroupLayout jOverviewLayout = new javax.swing.GroupLayout(jOverview);
        jOverview.setLayout(jOverviewLayout);
        jOverviewLayout.setHorizontalGroup(
            jOverviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 972, Short.MAX_VALUE)
        );
        jOverviewLayout.setVerticalGroup(
            jOverviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 487, Short.MAX_VALUE)
        );

        jTabbedPane.addTab(bundle.getString("myHome.jOverview.TabConstraints.tabTitle"), jOverview); // NOI18N

        jButton1.setText(bundle.getString("myHome.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(bundle.getString("myHome.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jShowOverview.setSelected(true);
        jShowOverview.setText(bundle.getString("myHome.jShowOverview.text")); // NOI18N
        jShowOverview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jShowOverviewActionPerformed(evt);
            }
        });

        jLabel1.setText(bundle.getString("myHome.jLabel1.text")); // NOI18N

        jCPU.setText(bundle.getString("myHome.jCPU.text")); // NOI18N

        jRAM.setText(bundle.getString("myHome.jRAM.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jExit, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jShowOverview)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRAM)
                            .addComponent(jCPU))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jDaemon, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jExit)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jShowOverview)
                            .addComponent(jLabel1))
                        .addComponent(jDaemon, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCPU)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRAM)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExitActionPerformed
        Rectangle bounds = this.getBounds();
        Properties prop = new Properties();
        try {
            prop.load(new FileInputStream(gsConfigFilename));
            //hier neue Koordinaten abspeichern
            } catch (FileNotFoundException ex) {
                File f = new File(myHome.gsConfigDirectory);
                Boolean b = f.mkdir();
                f = new File(gsConfigFilename);
                try {
                    f.createNewFile();
                } catch (IOException ex1) {
                    Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex1);
                }
            } catch (IOException ex) {
                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
            }
        prop.setProperty("SmartHome", "" + bounds.x + ";" + bounds.y);
        try {
            prop.store(new FileOutputStream(myHome.gsConfigFilename), "Properties");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
            }
        System.exit(0);
    }//GEN-LAST:event_jExitActionPerformed

    private void bn1_1ActionPerformed(ActionEvent evt) {    //only switches here
        Object source = evt.getSource();
        //find the right button
        for (Object myDevice : myDevices) {
            Devices dev = (Devices) myDevice;
            if(dev.getSingleAction() == source)
            {
                JButton bn = (JButton) source;
                String strState;
                if(dev.getState() == 0)
                {
                    dev.setState(1);
                    strState = "on";
                    bn.setIcon(dev.getIconOn());
                }
                else
                {
                    dev.setState(0);
                    strState = "off";
                    bn.setIcon(dev.getIconOff());
                }
                String strJson = "{\"action\":\"control\",\"code\":{\"device\":\""+ dev.getName() + "\",\"state\":\"" + strState + "\"}}\n"; 
                printStream.print("{\"action\":\"identify\"}\n");
                printStream.flush();
                printStream.print(strJson);
                printStream.flush();
            }
        }
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        jDaemon.setIcon(new ImageIcon(IIDaemon_aus.getImage().getScaledInstance(jDaemon.getBounds().width, jDaemon.getBounds().height, Image.SCALE_DEFAULT)));

        String line;
        DatagramSocket ssdp;

        String msg = "M-SEARCH * HTTP/1.1\r\n"
                                 + "Host:239.255.255.250:1900\r\n"
                             + "ST:urn:schemas-upnp-org:service:pilight:1\r\n"
                                 + "Man:\"ssdp:discover\"\r\n"
                                 + "MX:3\r\n\r\n";		

        int tryAgain = 1;
        do
        {
        try {
                Enumeration<NetworkInterface> nets = NetworkInterface.getNetworkInterfaces();
        for(NetworkInterface netint : Collections.list(nets)) {
                Enumeration<InetAddress> inetAddresses = netint.getInetAddresses();
                for(InetAddress inetAddress : Collections.list(inetAddresses)) {
                        if(!inetAddress.isLoopbackAddress() && inetAddress instanceof Inet4Address) {   
                                        try {
                                        ssdp = new DatagramSocket(new InetSocketAddress(inetAddress.getHostAddress().toString(), 0));
                                                byte[] buff = msg.getBytes();
                                                DatagramPacket sendPack = new DatagramPacket(buff, buff.length);
                                                sendPack.setAddress(InetAddress.getByName("239.255.255.250"));
                                                sendPack.setPort(1900);

                                                try {
                                                        ssdp.send(sendPack);
                                                        ssdp.setSoTimeout(10);
                                                        boolean loop = true;
                                                        while(loop) {
                                                                DatagramPacket recvPack = new DatagramPacket(new byte[1024], 1024);
                                                                ssdp.receive(recvPack);
                                                                byte[] recvData = recvPack.getData();
                                                                InputStreamReader recvInput = new InputStreamReader(new ByteArrayInputStream(recvData), Charset.forName("UTF-8"));
                                                                StringBuilder recvOutput = new StringBuilder();
                                                                for(int value; (value = recvInput.read()) != -1;) {
                                                                        recvOutput.append((char)value);
                                                                }
                                                                BufferedReader bufReader = new BufferedReader(new StringReader(recvOutput.toString()));
                                                                Pattern pattern = Pattern.compile("Location:([0-9.]+):(.*)");
                                                                while((line=bufReader.readLine()) != null) {
                                                                        Matcher matcher = pattern.matcher(line);
                                                                        if(matcher.matches()) {
                                                                                server = matcher.group(1);
                                                                                port = Integer.parseInt(matcher.group(2));
                                                                                loop = false;
                                                                                tryAgain = 0;
                                                                                break;
                                                                        }
                                                                }
                                                        }
                                                } catch(SocketTimeoutException e) {
                                                } catch(IOException e) {
                                                        String s =java.util.ResourceBundle.getBundle("mysmarthome/Bundle").getString("nopilightfound");
                                                        JOptionPane.showMessageDialog(null, s);
                                                        ssdp.close();
                                                        System.exit(0);
                                                }
                                        } catch(UnknownHostException e) {
                                        }
                                }
	        	}
	        }
        } catch(SocketException e) {
		}
	
		if(server == null || port == 0) {
                try {
                    String s =java.util.ResourceBundle.getBundle("mysmarthome/Bundle").getString("nopilightfound") + java.util.ResourceBundle.getBundle("mysmarthome/Bundle").getString("tryAgain");
                    if(tryAgain == 1) JOptionPane.showMessageDialog(null, s);
                    if(tryAgain == 2)
                    {
                        s =java.util.ResourceBundle.getBundle("mysmarthome/Bundle").getString("noanswer");
                        JOptionPane.showMessageDialog(null, s);
                        System.exit(0);
                    }
                    Thread.sleep(200);
                    tryAgain = 2;
                } catch (InterruptedException ex) {
                        Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
                    }
		}
        }while(tryAgain > 0);
                
                
        jDaemon.setIcon(new ImageIcon(IIDaemon.getImage().getScaledInstance(jDaemon.getBounds().width, jDaemon.getBounds().height, Image.SCALE_DEFAULT)));

// ---------- Konfiguration lesen -----------------
        socket = new Socket();
            
        try {
            socket.connect(new InetSocketAddress(server, port), 1000);
            int size = 1025;
            if(printStream == null) {
                printStream = new PrintStream(socket.getOutputStream(), false);
            }
//            printStream.print("{\"action\":\"identify\",\"options\":{\"core\":1,\"core\":1,\"receiver\":1,\"config\":0}}\n");
            printStream.print("{\"action\":\"identify\"}\n");
            printStream.flush();
            printStream.print("{\"action\":\"request config\"}\n");
            printStream.flush();
//--- Konfig einlesen ---
            
            
            InputStream is;
            is = socket.getInputStream();
            
            try {
                if(bufferedReader == null) {
                    bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8"), size);
                }
                
                int c;
                String s;
                String strMeldungen = null;
                StringBuilder response = new StringBuilder();
                Thread.sleep(100);
                for(int i = 0; i < 4; i++)
                {
                   if(bufferedReader.ready()) {
                       while((c = bufferedReader.read()) != '\n') {
                           response.append((char)c);
                       }
                       s = response.toString();
                       strMeldungen += (s+'\n');
                       response.delete(0, 1025);
                   }
                }
                if(strMeldungen != null)
                {
                    String[] strArr = strMeldungen.split("\n");                 //we have got some messages
                    if(strArr[0].contains("success"))                           // :-)
                    {
                        String[] s_arr = strArr[2].split("}},"); 
/*
         s_arr[0] ->               
{"message":"config","config":{"devices":{"zeit":{"uuid":"0000-b8-27-eb-645807","origin":"0000-b8-27-eb-645807","timestamp":1442246835,"protocol":["datetime"],"id":[{"longitude":11.2345,"latitude":12.3456}],"year":2015,"month":9,"day":14,"hour":17,"minute":7,"second":15,"weekday":2,"dst":0},"pingel":{"uuid":"0000-b8-27-eb-645807","origin":"0000-b8-27-eb-645807","timestamp":1442237563,"protocol":["arping"],"id":[{"mac":"2c:8a:72:b9:40:d2"}],"ip":"0.0.0.0","state":"disconnected","poll-interval":10},"tv":{"uuid":"0000-b8-27-eb-645807","origin":"0000-b8-27-eb-645807","timestamp":1442215157,"protocol":["relay"],"id":[{"gpio":6}],"state":"on","default-state":"off"},"Taster":{"uuid":"0000-b8-27-eb-645807","origin":"0000-b8-27-eb-645807","timestamp":0,"protocol":["elro_800_switch"],"id":[{"systemcode":21,"unitcode":9}],"state":"on"},"Dose":{"uuid":"0000-b8-27-eb-645807","origin":"0000-b8-27-eb-645807","timestamp":0,"protocol":["intertechno_switch"],"id":[{"id":13232294,"unit":2}],"state":"off"},
     "lab":{"uuid":"0000-b8-27-eb-645807","origin":"0000-b8-27-eb-645807","timestamp":0,"protocol":["generic_label"],"id":[{"id":100}],"label":"test1234","color":"red"},
     "outside":{"uuid":"0000-b8-27-eb-645807","origin":"0000-b8-27-eb-645807","timestamp":1442246335,"protocol":["openweathermap"],"id":[{"country":"de","location":"hannover"}],"humidity":93.00,"temperature":16.06,"sunrise":6.53,"sunset":19.38,"sun":"set","update":1,"poll-interval":86400},"temperature":{"uuid":"0000-b8-27-eb-645807","origin":"0000-b8-27-eb-645807","timestamp":0,"protocol":["dht22"],"id":[{"gpio":7}],"humidity":44.0,"temperature":27.0,"poll-interval":5,"humidity-offset":0,"temperature-offset":0
     dimm":{"uuid":"0000-b8-27-eb-645807","origin":"0000-b8-27-eb-645807","timestamp":1444820091,"protocol":["kaku_dimmer"],"id":[{"id":110,"unit":1}],"state":"on","dimlevel":13,"dimlevel-maximum":15,"dimlevel-minimum":0
     rpi":{"uuid":"0000-b8-27-eb-645807","origin":"0000-b8-27-eb-645807","timestamp":1444839414,"protocol":["cpu_temp"],"id":[{"id":1}],"temperature":41.160,"poll-interval":10,"temperature-offset":0,                   
*/                        
                        strConfig = strArr[2].split(",");
                        int nLauf = s_arr[0].indexOf("devices") + 11;
                        s = s_arr[0].substring(nLauf, s_arr[0].length());
                        
                        String[] strJsonObj = s.split("},\"");
                        
                        for (String strJsonObj1 : strJsonObj) {
                            s = strJsonObj1 + ",";
                            nLauf = s.indexOf('\"');
                            Devices dev = new Devices(s.substring(0, nLauf));   //name
                            myDevices.add(dev);                                   // add to List of Rooms
                            nLauf = s.indexOf("origin");
                            s = s.substring(nLauf + 9, s.length());
                            nLauf = s.indexOf('\"');
                            dev.setUUID(s.substring(0, nLauf));                 //UUID
                            nLauf = s.indexOf("protocol");
                            s = s.substring(nLauf + 12, s.length());            //protocol
                            nLauf = s.indexOf('\"');
                            dev.setProtokoll(s.substring(0, nLauf));
                            nLauf = s.indexOf("id");
                            s = s.substring(nLauf + 7, s.length());
                            nLauf = s.indexOf("}]");
                            dev.setIDs(s.substring(0, nLauf));                  //IDs
                            s = s.substring(nLauf + 2, s.length());
                            if(s.contains("year"))
                            {
                                nLauf = s.indexOf("year");
                                String str = s.substring(nLauf + 6, s.length());
                                dev.setYear(str.substring(0, 4));
                                nLauf = s.indexOf("month");
                                str = s.substring(nLauf + 7, s.length());
                                if(str.charAt(1) != ',')
                                {
                                    dev.setMonth(str.substring(0, 2));
                                }
                                else
                                {
                                    dev.setMonth("" + str.charAt(0));
                                }
                                nLauf = s.indexOf("day");
                                str = s.substring(nLauf + 5, s.length());
                                if(str.charAt(1) != ',')
                                {
                                    dev.setDay(str.substring(0, 2));
                                }
                                else
                                {
                                    dev.setDay("" + str.charAt(0));
                                }       //no further information here...
                                dev.setHour("0");
                                dev.setMinute("0");
                                dev.setSecond("0");
                            }
                            else if(s.contains("ip"))
                            {
                                nLauf = s.indexOf("ip");
                                String str = s.substring(nLauf + 5, s.length());
                                String string = "";
                                for( int m = 0; m < 18; m++)
                                {
                                    if(str.charAt(m) == '"')
                                        break;
                                    string += str.charAt(m);
                                }
                                dev.setIP(string);
                                nLauf = s.indexOf("state");
                                str = s.substring(nLauf + 7, s.length());
                                if(str.contains("disconnected"))
                                    dev.setState(0);
                                else
                                    dev.setState(1);
                            }
                            else if(s.contains("\"label\":"))
                            {
                                nLauf = s.indexOf("\"label\":");
                                String str = s.substring(nLauf + 9, s.length());
                                nLauf = str.indexOf("\",\"");
                                dev.setLabel(str.substring(0,nLauf));
                                if(s.contains("color"))
                                {
                                    nLauf = s.indexOf("\"color\":");
                                    str = s.substring(nLauf + 9, s.length());
                                    nLauf = str.indexOf("\"");
                                    dev.setLabelColor(str.substring(0,nLauf));
                                }
                            }
                            else
                            {
                                if(s.contains("\"humidity\":"))
                                {
                                    if(s.contains("\"humidity-offset\":"))
                                    {
                                        nLauf = s.indexOf("\"humidity-offset\":");
                                        String str = s.substring(nLauf + 18, s.length());
                                        nLauf = str.indexOf(".") + 2;
                                        if(nLauf == 0)
                                            nLauf++;
                                        dev.setHumOffset(str.substring(0, nLauf));
                                    }
                                    nLauf = s.indexOf("\"humidity\":");
                                    String str = s.substring(nLauf + 11, s.length());
                                    nLauf = str.indexOf(",\"");
                                    dev.setHumidity(str.substring(0,nLauf));
                                }
                                if(s.contains("\"temperature\":"))
                                {
                                    if(s.contains("\"temperature-offset\":"))
                                    {
                                        nLauf = s.indexOf("\"temperature-offset\":");
                                        String str = s.substring(nLauf + 21, s.length());
                                        nLauf = str.indexOf(".") + 2;
                                        if(nLauf == 0)
                                            nLauf++;
                                        dev.setTempOffset(str.substring(0, nLauf));
                                    }
                                    nLauf = s.indexOf("\"temperature\":");
                                    String str = s.substring(nLauf + 14, s.length());
                                    nLauf = str.indexOf(".") + 2;
                                    dev.setTemperature(str.substring(0,nLauf));
                                }
                                if(s.contains("\"pressure\":"))
                                {
                                    nLauf = s.indexOf("\"pressure\":");
                                    String str = s.substring(nLauf + 11, s.length());
                                    nLauf = str.indexOf(",\"");
                                    dev.setAirPressure(str.substring(0,nLauf));
                                }
                                if(s.contains("\"sunrise\":"))
                                {
                                    nLauf = s.indexOf("\"sunrise\":");
                                    String str = s.substring(nLauf + 10, s.length());
                                    nLauf = str.indexOf(",\"");
                                    dev.setSunrise(str.substring(0,nLauf));
                                }
                                if(s.contains("\"sunset\":"))
                                {
                                    nLauf = s.indexOf("\"sunset\":");
                                    String str = s.substring(nLauf + 9, s.length());
                                    nLauf = str.indexOf(",\"");
                                    dev.setSunset(str.substring(0,nLauf));
                                }
                                if(s.contains("state"))
                                {
                                    nLauf = s.indexOf("state");
                                    String str = s.substring(nLauf + 8, s.length());
                                    nLauf = str.indexOf("\"");
                                    str = str.substring(0, nLauf);
                                    if(str.contains("off") || str.contains("opened"))
                                        dev.setState(0);
                                    else
                                        dev.setState(1);
                                    if(s.contains("dimlevel"))
                                    {
                                        nLauf = s.indexOf("dimlevel\"");
                                        str = s.substring(nLauf + 10, s.length());
                                        nLauf = str.indexOf(",");
                                        str = str.substring(0, nLauf);
                                        dev.setDimlevel(Integer.parseInt(str));
                                        nLauf = s.indexOf("dimlevel-max");
                                        str = s.substring(nLauf + 18, s.length());
                                        nLauf = str.indexOf(",");
                                        str = str.substring(0, nLauf);
                                        dev.setDimMax(Integer.parseInt(str));
                                        nLauf = s.indexOf("dimlevel-min");
                                        str = s.substring(nLauf + 18, s.length());
                                        nLauf = str.indexOf(",");
                                        str = str.substring(0, nLauf);
                                        dev.setDimMin(Integer.parseInt(str));
                                    }
                                }
                            }
                        }
/*
         s_arr[2] ->
"gui":{"Dose":{"type":1,"order":1,"name":"Dose","group":["Test"],"media":["all"],"readonly":0,"confirm":0},"lab":{"type":15,"order":2,"name":"Label","group":["Test"],"media":["all"]},"tv":{"type":4,"order":3,"name":"PinOut","group":["Test"],"media":["all"],"confirm":0,"readonly":0},
                        "temperature":{"type":3,"order":4,"name":"Temperature Sensor","group":["Misc"],"media":["all"],"show-humidity":1,"show-temperature":1,"humidity-decimals":1,"temperature-decimals":1},"outside":{"type":3,"order":5,"name":"Temperature","group":["Misc"],"media":["all"],"show-update":1,"show-sunriseset":1,"show-temperature":1,"show-humidity":1,"sunriseset-decimals":2,"humidity-decimals":2,"temperature-decimals":2},
                        "zeit":{"type":8,"order":6,"name":"Date & Time","group":["Misc"],"media":["all"],"format":"HH:mm:ss YYYY-MM-DD","show-datetime":0                        
*/                       
                        if(s_arr[1].contains("\"rules\":{},"))
                            s_arr[2] = s_arr[1].substring(11, s_arr[1].length());
                        if(s_arr[2].length() > "\"gui\":{},".length())
                        {
                            s = s_arr[2].substring(8, s_arr[2].length());
                            strArr = s.split("},\"");
                            int n;
                            for(n = 0; n < strArr.length; n++)
                            {
                                for(int i = 0; i < myDevices.size(); i++)
                                {
                                    Devices dev = (Devices) myDevices.get(i);
                                    nLauf = strArr[n].indexOf("type");
                                    if(strArr[n].substring(0, nLauf-4).equals(dev.getName()))
                                    {
                                        String str = strArr[n].substring(nLauf + 6, strArr[n].length());
                                        if(str.charAt(1) != ',')
                                        {
                                            dev.setType("" + str.charAt(0) + str.charAt(1));
                                        }
                                        else
                                        {
                                            dev.setType("" + str.charAt(0));
                                        }
                                        nLauf = strArr[n].indexOf("name");
                                        str = strArr[n].substring(nLauf + 7, strArr[n].length());
                                        nLauf = str.indexOf("\",\"");
                                        str = str.substring(0,nLauf);
                                        dev.setGUIName(str);
                                        nLauf = strArr[n].indexOf("group");
                                        str = strArr[n].substring(nLauf + 9, strArr[n].length());
                                        nLauf = str.indexOf("\"],");
                                        str = str.substring(0,nLauf);
                                        dev.setRoom(str);
                                        nLauf = strArr[n].indexOf("media");
                                        str = strArr[n].substring(nLauf + 9, strArr[n].length());
                                        nLauf = str.indexOf("\"]");
                                        str = str.substring(0,nLauf);
                                        dev.setMedia(str);
                                        if(strArr[n].contains("show-humidity"))
                                        {
                                            nLauf = strArr[n].indexOf("show-humidity");
                                            str = strArr[n].substring(nLauf + 13, strArr[n].length());
                                            if(str.substring(0, 3).contains("0"))
                                                dev.setHumidity(null);
                                        }
                                        if(strArr[n].contains("show-temperature"))
                                        {
                                            nLauf = strArr[n].indexOf("show-temperature");
                                            str = strArr[n].substring(nLauf + 16, strArr[n].length());
                                            if(str.substring(0, 3).contains("0"))
                                                dev.setTemperature(null);
                                        }
                                        if(strArr[n].contains("show-pressure"))
                                        {
                                            nLauf = strArr[n].indexOf("show-pressure");
                                            str = strArr[n].substring(nLauf + 13, strArr[n].length());
                                            if(str.substring(0, 3).contains("0"))
                                                dev.setTemperature(null);
                                        }
                                        if(strArr[n].contains("show-sunriseset"))
                                        {
                                            nLauf = strArr[n].indexOf("show-sunriseset");
                                            str = strArr[n].substring(nLauf + 15, strArr[n].length());
                                            if(str.substring(0, 3).contains("0"))
                                            {
                                                dev.setSunrise(null);
                                                dev.setSunset(null);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                        int i;
                        int n = 0;
                        int NoOfElements[] = new int[200];
                        for(i = 0; i < myDevices.size(); i++)
                        {
                            Devices dev = (Devices) myDevices.get(i);
                            if(dev.getRoom() != null)
                            {
                                if(!strRooms.contains(dev.getRoom()))
                                {   //create new room
                                    String strR = dev.getRoom();
                                    strRooms.add(strR);
                                    JPanel pan = new JPanel();                      //add room to the pane
                                    Dimension dim = new Dimension(PicWidth, PicHeigth);
                                    pan.setPreferredSize(dim);
                                    pan.setLayout(null);
                                    File f = new File(myHome.gsConfigDirectory + strR + "_big.jpg");
                                    if(f.exists())
                                    {
                                        Room = new ImageIcon(myHome.gsConfigDirectory + strR + "_big.jpg");
                                    }
                                    else
                                    {
                                        f = new File(myHome.gsConfigDirectory + strR + "_big.png");
                                        if(f.exists())
                                            Room = new ImageIcon(myHome.gsConfigDirectory + strR + "_big.png");
                                        else
                                            Room = new ImageIcon(getClass().getResource("pictures/DefaultRoom_big.jpg"));
                                    }
                                    pan.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, PicWidth, PicHeigth, Room)); //set background
                                    jTabbedPane.insertTab(strR, null, pan, null, jTabbedPane.getTabCount());
                                    f = new File(myHome.gsConfigDirectory + strR + ".jpg");
                                    if(f.exists())
                                    {
                                        Room = new ImageIcon(myHome.gsConfigDirectory + strR + ".jpg");
                                    }
                                    else
                                    {
                                        f = new File(myHome.gsConfigDirectory + strR + ".png");
                                        if(f.exists())
                                            Room = new ImageIcon(myHome.gsConfigDirectory + strR + ".png");
                                        else
                                            Room = new ImageIcon(getClass().getResource("pictures/DefaultRoom.jpg"));
                                    }
                                    JLabel l = new JLabel(Room);
                                    Dimension preferredSize = l.getPreferredSize();
                                    Rectangle r = new Rectangle();
                                    r.height = preferredSize.height;
                                    r.width = preferredSize.width;
                                    r.x += (n%7)*(r.width + 10) + 10;
                                    r.y += (n/7)*(r.height + 40) + 10;
                                    l.setBounds(r);
                                    l.addMouseListener(new java.awt.event.MouseListener() {

                                        @Override
                                        public void mouseClicked(MouseEvent e) {
                                            Rectangle bounds = l.getBounds();
                                            int col = bounds.x / bounds.width + 1;
                                            int row = bounds.y / bounds.height ;
                                            jTabbedPane.setSelectedIndex(col + row*7);
                                        }

                                        @Override
                                        public void mousePressed(MouseEvent e) {
                                        }

                                        @Override
                                        public void mouseReleased(MouseEvent e) {
                                        }

                                        @Override
                                        public void mouseEntered(MouseEvent e) {
                                        }

                                        @Override
                                        public void mouseExited(MouseEvent e) {
                                        }
                                    });
                                    JPanel component = (JPanel) jTabbedPane.getComponent(0);
                                    component.add(l);
                                    
                                    JLabel ll = new JLabel(strR);
                                    preferredSize = ll.getPreferredSize();
                                    r.x = (n%7)*(r.width + 10) + 15;
                                    r.y = l.getBounds().y + r.height + 5;
                                    r.height = preferredSize.height;
                                    r.width = preferredSize.width;
                                    ll.setBounds(r);
                                    component.add(ll);
                                    ll.setVisible(true);
                                    n++;
                                }
                            }
                        }
                        Properties prop = new Properties();
                        try {
                            prop.load(new FileInputStream(gsConfigFilename));
                        } catch (FileNotFoundException ex) {
                            File f = new File(myHome.gsConfigDirectory);
                            Boolean b = f.mkdir();
                            f = new File(gsConfigFilename);
                            f.createNewFile();
                        }
                        s = prop.getProperty("SmartHome","30;30");
                        String strBounds[] = s.split(";");
                        Rectangle bounds = this.getBounds();
                        bounds.x = Integer.parseInt(strBounds[0]);
                        bounds.y = Integer.parseInt(strBounds[1]);
                        this.setBounds(bounds);
                        for(int g = 1; g < jTabbedPane.getTabCount(); g++)
                        {
                            JPanel pan = (JPanel) jTabbedPane.getComponent(g);
                            for(int j = 0; j < myDevices.size(); j++)
                            {
                                Devices d = (Devices) myDevices.get(j);
                                if(d.getRoom() != null)
                                {
                                    if(d.getRoom().equals(strRooms.get(g-1)))
                                    {
                                        switch(d.getType())
                                        {
                                            case 3:         //weather
                                                d.setIconTemperature(new ImageIcon(getClass().getResource("pictures/termometer.jpg")));
                                                d.setIconHumidity(new ImageIcon(getClass().getResource("pictures/Feuchte.jpg")));
                                                d.setIconPressure(new ImageIcon(getClass().getResource("pictures/barometer.jpg")));
                                                d.setIconSunRise(new ImageIcon(getClass().getResource("pictures/sonnenaufgang.jpg")));
                                                d.setIconSunSet(new ImageIcon(getClass().getResource("pictures/sonnenuntergang.jpg")));
                                                JTextField tf = new JTextField(d.getGUIName());
                                                Rectangle r = tf.getBounds();
                                                Dimension tfDim = tf.getPreferredSize();
                                                JButton bnHum = new JButton();
                                                bnHum.setText("");
                                                JButton bnTemp = new JButton();
                                                bnTemp.setText("");
                                                JButton bnAirPress = new JButton();
                                                bnAirPress.setText("");
                                                JButton bnSunR = new JButton();
                                                bnSunR.setText("");
                                                JButton bnSunS = new JButton();
                                                bnSunS.setText("");
                                                if(d.getHumidity() != null)
                                                {
                                                    bnHum.setIcon(d.getIconHumidity());
                                                    bnHum.setText(d.getHumidity() + "%");
                                                }
                                                if(d.getTemperature() != null)
                                                {
                                                    bnTemp.setIcon(d.getIconTemperature());
                                                    bnTemp.setText(d.getTemperature() + "°C");
                                                    bnTemp.addActionListener(new java.awt.event.ActionListener() {

                                                        @Override
                                                        public void actionPerformed(ActionEvent e) {
                                                            Statistik statistik = new Statistik();
                                                            statistik.iVal = d.nTemperature;
                                                            statistik.setVisible(true);
                                                        }
                                                    });
                                                }
                                                if(d.getAirPressure() != null)
                                                {
                                                    bnAirPress.setIcon(d.getIconPressure());
                                                    bnAirPress.setText(d.getAirPressure() + "hPa");
                                                }
                                                if(d.getSunrise() != null)
                                                {
                                                    bnSunR.setIcon(d.getIconSunRise());
                                                    bnSunR.setText(d.getSunrise() + " h");
                                                }
                                                if(d.getSunset() != null)
                                                {
                                                    bnSunS.setIcon(d.getIconSunSet());
                                                    bnSunS.setText(d.getSunset() + " h");
                                                }
                                                String strProp = prop.getProperty(d.getGUIName());
                                                if(strProp == null)
                                                {
                                                    r.setBounds(5, 20 + NoOfElements[g-1]*50, tfDim.width, tfDim.height);
                                                }
                                                else
                                                {
                                                    String[] strR = strProp.split(";");
                                                    if(strR.length != 2)
                                                    {
                                                        r.setBounds(5, 20 + NoOfElements[g-1]*50, tfDim.width, tfDim.height);
                                                    }
                                                    else
                                                    {
                                                        int iX = Integer.parseInt(strR[0]);
                                                        int iY = Integer.parseInt(strR[1]);
                                                        r.setBounds(iX, iY, tfDim.width, tfDim.height);
                                                    }
                                                }
                                                NoOfElements[g-1]++;
                                                tf.setBounds(r);
                                                tf.setEditable(false);
                                                tf.addMouseMotionListener(new java.awt.event.MouseMotionListener() {

                                                    @Override
                                                    public void mouseDragged(MouseEvent e) {
                                                       int x =  e.getXOnScreen();
                                                       x -= pan.getLocationOnScreen().x;
                                                       if (x > PicWidth - 20)
                                                           x = PicWidth - 20;
                                                       int y = e.getYOnScreen();
                                                       y -= pan.getLocationOnScreen().y;
                                                       if(y > PicHeigth - 20)
                                                           y = PicHeigth - 20;
                                                       tf.setBounds(x, y, tf.getWidth(), tf.getHeight());
                                                       x += (5 + tfDim.width);
                                                       if(!"".equals(bnHum.getText()))
                                                       {
                                                           bnHum.setBounds(x, y, bnHum.getPreferredSize().width, bnHum.getPreferredSize().height);
                                                           x += (bnHum.getBounds().width + 5);
                                                       }
                                                       if(!"".equals(bnTemp.getText()))
                                                       {
                                                           bnTemp.setBounds(x, y, bnTemp.getPreferredSize().width, bnTemp.getPreferredSize().height);
                                                           x += (bnTemp.getBounds().width + 5);
                                                       }
                                                       if(!"".equals(bnAirPress.getText()))
                                                       {
                                                           bnAirPress.setBounds(x, y, bnAirPress.getPreferredSize().width, bnAirPress.getPreferredSize().height);
                                                           x += (bnAirPress.getBounds().width + 5);
                                                       }
                                                       if(!"".equals(bnSunR.getText()))
                                                       {
                                                           bnSunR.setBounds(x, y, bnSunR.getPreferredSize().width, bnSunR.getPreferredSize().height);
                                                           x += (bnSunR.getBounds().width + 5);
                                                       }
                                                       if(!"".equals(bnSunS.getText()))
                                                       {
                                                           bnSunS.setBounds(x, y, bnSunS.getPreferredSize().width, bnSunS.getPreferredSize().height);
                                                           x += (bnSunS.getBounds().width + 5);
                                                       }
                                                    }

                                                    @Override
                                                    public void mouseMoved(MouseEvent e) {
                                                    }
                                                });
                                                tf.addMouseListener(new java.awt.event.MouseListener() {

                                                    @Override
                                                    public void mouseClicked(MouseEvent e) {
                                                    }

                                                    @Override
                                                    public void mousePressed(MouseEvent e) {
                                                    }

                                                    @Override
                                                    public void mouseReleased(MouseEvent e) {
                                                        Properties prop = new Properties();
                                                        try {
                                                            prop.load(new FileInputStream(gsConfigFilename));
                                                            //hier neue Koordinaten abspeichern
                                                            } catch (FileNotFoundException ex) {
                                                                File f = new File(myHome.gsConfigDirectory);
                                                                Boolean b = f.mkdir();
                                                                f = new File(gsConfigFilename);
                                                                try {
                                                                    f.createNewFile();
                                                                } catch (IOException ex1) {
                                                                    Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex1);
                                                                }
                                                            } catch (IOException ex) {
                                                                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
                                                            }
                                                        prop.setProperty(d.getGUIName(), "" + tf.getBounds().x + ";" + tf.getBounds().y);
                                                        try {
                                                            prop.store(new FileOutputStream(myHome.gsConfigFilename), "Properties");
                                                            } catch (FileNotFoundException ex) {
                                                                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
                                                            } catch (IOException ex) {
                                                                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
                                                            }
                                                     }

                                                    @Override
                                                    public void mouseEntered(MouseEvent e) {
                                                    }

                                                    @Override
                                                    public void mouseExited(MouseEvent e) {
                                                    }
                                                });

                                                int x = r.x + 5 + tfDim.width;
                                                
                                                ArrayList<Component> ActionList = new ArrayList<>();
                                                if(!"".equals(bnHum.getText()))
                                                {
                                                    bnHum.setBounds(x, r.y, bnHum.getPreferredSize().width, bnHum.getPreferredSize().height);
                                                    x += (bnHum.getBounds().width + 5);
                                                    ActionList.add(bnHum);
                                                    pan.add(bnHum).setVisible(true);
                                                }
                                                else
                                                {
                                                    ActionList.add(null);
                                                }
                                                if(!"".equals(bnTemp.getText()))
                                                {
                                                    bnTemp.setBounds(x, r.y, bnTemp.getPreferredSize().width, bnTemp.getPreferredSize().height);
                                                    x += (bnTemp.getBounds().width + 5);
                                                    pan.add(bnTemp).setVisible(true);
                                                    ActionList.add(bnTemp);
                                                }
                                                else
                                                {
                                                    ActionList.add(null);
                                                }
                                                if(!"".equals(bnAirPress.getText()))
                                                {
                                                    bnAirPress.setBounds(x, r.y, bnAirPress.getPreferredSize().width, bnAirPress.getPreferredSize().height);
                                                    x += (bnAirPress.getBounds().width + 5);
                                                    pan.add(bnAirPress).setVisible(true);
                                                    ActionList.add(bnAirPress);
                                                }
                                                else
                                                {
                                                    ActionList.add(null);
                                                }
                                                if(!"".equals(bnSunR.getText()))
                                                {
                                                    bnSunR.setBounds(x, r.y, bnSunR.getPreferredSize().width, bnSunR.getPreferredSize().height);
                                                    x += (bnSunR.getBounds().width + 5);
                                                    pan.add(bnSunR).setVisible(true);
                                                    ActionList.add(bnSunR);
                                                }
                                                else
                                                {
                                                    ActionList.add(null);
                                                }
                                                if(!"".equals(bnSunS.getText()))
                                                {
                                                    bnSunS.setBounds(x, r.y, bnSunS.getPreferredSize().width, bnSunS.getPreferredSize().height);
                                                    x += (bnSunS.getBounds().width + 5);
                                                    pan.add(bnSunS).setVisible(true);
                                                    ActionList.add(bnSunS);
                                                }
                                                else
                                                {
                                                    ActionList.add(null);
                                                }
                                                d.setAction(ActionList);
                                                pan.add(tf).setVisible(true);
                                                break;
                                                
                                            case 1:         // switch
                                            case 4:         // relay
                                                File f = new File(myHome.gsConfigDirectory + d.getName() + "_on.jpg");
                                                if(f.exists())
                                                {
                                                    Room = new ImageIcon(myHome.gsConfigDirectory + d.getName() + "_on.jpg");
                                                    d.setIconOn(Room);
                                                }
                                                else
                                                {
                                                    f = new File(myHome.gsConfigDirectory + d.getName() + "_on.png");
                                                    if(f.exists())
                                                        d.setIconOn(new ImageIcon(myHome.gsConfigDirectory + d.getName() + "_on.png"));
                                                    else
                                                    {
                                                        f = new File(myHome.gsConfigDirectory + d.getName() + "_on.gif");
                                                        if(f.exists())
                                                        {
                                                            d.setIconOn(new ImageIcon(myHome.gsConfigDirectory + d.getName() + "_on.gif"));
                                                        }
                                                        else
                                                            d.setIconOn(new ImageIcon(getClass().getResource("pictures/lamp_on.jpg")));
                                                    }
                                                }
                                                f = new File(myHome.gsConfigDirectory + d.getName() + "_off.jpg");
                                                if(f.exists())
                                                {
                                                    Room = new ImageIcon(myHome.gsConfigDirectory + d.getName() + "_off.jpg");
                                                    d.setIconOff(Room);
                                                }
                                                else
                                                {
                                                    f = new File(myHome.gsConfigDirectory + d.getName() + "_off.png");
                                                    if(f.exists())
                                                        d.setIconOff(new ImageIcon(myHome.gsConfigDirectory + d.getName() + "_off.png"));
                                                    else
                                                    {
                                                        f = new File(myHome.gsConfigDirectory + d.getName() + "_off.gif");
                                                        if(f.exists())
                                                        {
                                                            d.setIconOff(new ImageIcon(myHome.gsConfigDirectory + d.getName() + "_off.gif"));
                                                        }
                                                        else
                                                            d.setIconOff(new ImageIcon(getClass().getResource("pictures/lamp_off.jpg")));
                                                    }
                                                }
                                            case 6:         //contact
                                                if(d.getType() == 6) 
                                                {
                                                    f = new File(myHome.gsConfigDirectory + d.getName() + "_on.jpg");
                                                    if(f.exists())
                                                    {
                                                        Room = new ImageIcon(myHome.gsConfigDirectory + d.getName() + "_on.jpg");
                                                        d.setIconOn(Room);
                                                    }
                                                    else
                                                    {
                                                        f = new File(myHome.gsConfigDirectory + d.getName() + "_on.png");
                                                        if(f.exists())
                                                            d.setIconOn(new ImageIcon(myHome.gsConfigDirectory + d.getName() + "_on.png"));
                                                        else
                                                        {
                                                            f = new File(myHome.gsConfigDirectory + d.getName() + "_on.gif");
                                                            if(f.exists())
                                                            {
                                                                d.setIconOn(new ImageIcon(myHome.gsConfigDirectory + d.getName() + "_on.gif"));
                                                            }
                                                            else
                                                                d.setIconOn(new ImageIcon(getClass().getResource("pictures/contact_on.jpg")));
                                                        }
                                                    }
                                                    f = new File(myHome.gsConfigDirectory + d.getName() + "_off.jpg");
                                                    if(f.exists())
                                                    {
                                                        Room = new ImageIcon(myHome.gsConfigDirectory + d.getName() + "_off.jpg");
                                                        d.setIconOff(Room);
                                                    }
                                                    else
                                                    {
                                                        f = new File(myHome.gsConfigDirectory + d.getName() + "_off.png");
                                                        if(f.exists())
                                                            d.setIconOff(new ImageIcon(myHome.gsConfigDirectory + d.getName() + "_off.png"));
                                                        else
                                                        {
                                                            f = new File(myHome.gsConfigDirectory + d.getName() + "_off.gif");
                                                            if(f.exists())
                                                            {
                                                                d.setIconOff(new ImageIcon(myHome.gsConfigDirectory + d.getName() + "_off.gif"));
                                                            }
                                                            else
                                                                d.setIconOff(new ImageIcon(getClass().getResource("pictures/contact_off.jpg")));
                                                        }
                                                    }
                                                }
                                                if(d.getState() == 0)
                                                    Room = d.getIconOff();
                                                else
                                                    Room = d.getIconOn();
                                                tf = new JTextField(d.getGUIName());
                                                r = tf.getBounds();
                                                tfDim = tf.getPreferredSize();
                                                strProp = prop.getProperty(d.getGUIName());
                                                if(strProp == null)
                                                {
                                                    r.setBounds(5, 20 + NoOfElements[g-1]*50, tfDim.width, tfDim.height);
                                                }
                                                else
                                                {
                                                    String[] strR = strProp.split(";");
                                                    if(strR.length != 2)
                                                    {
                                                        r.setBounds(5, 20 + NoOfElements[g-1]*50, tfDim.width, tfDim.height);
                                                    }
                                                    else
                                                    {
                                                        int iX = Integer.parseInt(strR[0]);
                                                        int iY = Integer.parseInt(strR[1]);
                                                        r.setBounds(iX, iY, tfDim.width, tfDim.height);
                                                    }
                                                }
                                                NoOfElements[g-1]++;
                                                tf.setBounds(r);
                                                tf.setEditable(false);
                                                JButton bn = new JButton();
                                                tf.addMouseMotionListener(new java.awt.event.MouseMotionListener() {

                                                    @Override
                                                    public void mouseDragged(MouseEvent e) {
                                                       int x =  e.getXOnScreen();
                                                       x -= pan.getLocationOnScreen().x;
                                                       if (x > PicWidth - 20)
                                                           x = PicWidth - 20;
                                                       int y = e.getYOnScreen();
                                                       y -= pan.getLocationOnScreen().y;
                                                       if(y > PicHeigth - 20)
                                                           y = PicHeigth - 20;
                                                       tf.setBounds(x, y, tf.getWidth(), tf.getHeight());
                                                       bn.setBounds(x + 5 + tfDim.width, y - 10, bn.getBounds().width, bn.getBounds().height);
                                                    }

                                                    @Override
                                                    public void mouseMoved(MouseEvent e) {
                                                    }
                                                });
                                                tf.addMouseListener(new java.awt.event.MouseListener() {

                                                    @Override
                                                    public void mouseClicked(MouseEvent e) {
                                                    }

                                                    @Override
                                                    public void mousePressed(MouseEvent e) {
                                                    }

                                                    @Override
                                                    public void mouseReleased(MouseEvent e) {
                                                        Properties prop = new Properties();
                                                        try {
                                                            prop.load(new FileInputStream(gsConfigFilename));
                                                            //hier neue Koordinaten abspeichern
                                                            } catch (FileNotFoundException ex) {
                                                                File f = new File(myHome.gsConfigDirectory);
                                                                Boolean b = f.mkdir();
                                                                f = new File(gsConfigFilename);
                                                                try {
                                                                    f.createNewFile();
                                                                } catch (IOException ex1) {
                                                                    Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex1);
                                                                }
                                                            } catch (IOException ex) {
                                                                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
                                                            }
                                                        prop.setProperty(d.getGUIName(), "" + tf.getBounds().x + ";" + tf.getBounds().y);
                                                        try {
                                                            prop.store(new FileOutputStream(myHome.gsConfigFilename), "Properties");
                                                            } catch (FileNotFoundException ex) {
                                                                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
                                                            } catch (IOException ex) {
                                                                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
                                                            }
                                                     }

                                                    @Override
                                                    public void mouseEntered(MouseEvent e) {
                                                    }

                                                    @Override
                                                    public void mouseExited(MouseEvent e) {
                                                    }
                                                });
                                                pan.add(tf).setVisible(true);
                                                bn.setIcon(Room);
                                                bn.setBounds(r.x + 5 + tfDim.width, r.y - 10, bn.getPreferredSize().width, bn.getPreferredSize().height);
                                                bn.setBorder(null);
                                                bn.setContentAreaFilled(false);
                                                bn.addActionListener(new java.awt.event.ActionListener() {
                                                    public void actionPerformed(java.awt.event.ActionEvent evt) {                                                      
                                                        bn1_1ActionPerformed(evt);
                                                    }
                                                });                                        
                                                pan.add(bn).setVisible(true);
                                                d.setSingleAction(bn);
                                                break;
                                                        
                                            case 2:    //Dimmer
                                                tf = new JTextField(d.getGUIName());
                                                r = tf.getBounds();
                                                tfDim = tf.getPreferredSize();
                                                strProp = prop.getProperty(d.getGUIName());
                                                if(strProp == null)
                                                {
                                                    r.setBounds(5, 20 + NoOfElements[g-1]*50, tfDim.width, tfDim.height);
                                                }
                                                else
                                                {
                                                    String[] strR = strProp.split(";");
                                                    if(strR.length != 2)
                                                    {
                                                        r.setBounds(5, 20 + NoOfElements[g-1]*50, tfDim.width, tfDim.height);
                                                    }
                                                    else
                                                    {
                                                        int iX = Integer.parseInt(strR[0]);
                                                        int iY = Integer.parseInt(strR[1]);
                                                        r.setBounds(iX, iY, tfDim.width, tfDim.height);
                                                    }
                                                }
                                                NoOfElements[g-1]++;
                                                tf.setBounds(r);
                                                tf.setEditable(false);
                                                JSlider sl = new JSlider(0,d.getDimMin(),d.getDimMax(),d.getDimlevel());
                                                JProgressBar pb = new JProgressBar(0,15);
                                                sl.setBounds(r.x + 5 + r.width, r.y, 150, r.height);
                                                pb.setBounds(r.x + 5 + r.width, r.y - r.height - 2, 150, r.height);
                                                tf.addMouseMotionListener(new java.awt.event.MouseMotionListener() {

                                                    @Override
                                                    public void mouseDragged(MouseEvent e) {
                                                       int x =  e.getXOnScreen();
                                                       x -= pan.getLocationOnScreen().x;
                                                       if (x > PicWidth - 20)
                                                           x = PicWidth - 20;
                                                       int y = e.getYOnScreen();
                                                       y -= pan.getLocationOnScreen().y;
                                                       if(y > PicHeigth - 20)
                                                           y = PicHeigth - 20;
                                                       tf.setBounds(x, y, tf.getWidth(), tf.getHeight());
                                                       sl.setBounds(x + 5 + tfDim.width, y, sl.getBounds().width, sl.getBounds().height);
                                                       pb.setBounds(x + 5 + tfDim.width, y - sl.getBounds().height - 2, 150, sl.getBounds().height);
                                                    }

                                                    @Override
                                                    public void mouseMoved(MouseEvent e) {
                                                    }
                                                });
                                                tf.addMouseListener(new java.awt.event.MouseListener() {

                                                    @Override
                                                    public void mouseClicked(MouseEvent e) {
                                                    }

                                                    @Override
                                                    public void mousePressed(MouseEvent e) {
                                                    }

                                                    @Override
                                                    public void mouseReleased(MouseEvent e) {
                                                        Properties prop = new Properties();
                                                        try {
                                                            prop.load(new FileInputStream(gsConfigFilename));
                                                            //hier neue Koordinaten abspeichern
                                                            } catch (FileNotFoundException ex) {
                                                                File f = new File(myHome.gsConfigDirectory);
                                                                Boolean b = f.mkdir();
                                                                f = new File(gsConfigFilename);
                                                                try {
                                                                    f.createNewFile();
                                                                } catch (IOException ex1) {
                                                                    Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex1);
                                                                }
                                                            } catch (IOException ex) {
                                                                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
                                                            }
                                                        prop.setProperty(d.getGUIName(), "" + tf.getBounds().x + ";" + tf.getBounds().y);
                                                        try {
                                                            prop.store(new FileOutputStream(myHome.gsConfigFilename), "Properties");
                                                            } catch (FileNotFoundException ex) {
                                                                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
                                                            } catch (IOException ex) {
                                                                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
                                                            }
                                                     }

                                                    @Override
                                                    public void mouseEntered(MouseEvent e) {
                                                    }

                                                    @Override
                                                    public void mouseExited(MouseEvent e) {
                                                    }
                                                });
                                                pan.add(tf).setVisible(true);
                                                pan.add(sl).setVisible(true);
                                                sl.addMouseListener(new java.awt.event.MouseListener() {

                                                    @Override
                                                    public void mouseClicked(MouseEvent e) {
                                                        String strState;
                                                        if(d.getState() == 0)
                                                        {
                                                            strState = "on";
                                                        }
                                                        else
                                                        {
                                                            strState = "off";
                                                        }
                                                        String strJson = "{\"action\":\"control\",\"code\":{\"device\":\""+ d.getName() + "\",\"state\":\"" + strState + "\"}}\n"; 
                                                        printStream.print("{\"action\":\"identify\"}\n");
                                                        printStream.flush();
                                                        printStream.print(strJson);
                                                        printStream.flush();
                                                    }

                                                    @Override
                                                    public void mousePressed(MouseEvent e) {
                                                    }

                                                    @Override
                                                    public void mouseReleased(MouseEvent e) {
                                                        String strState;
                                                        if(d.getState() == 1)
                                                        {
                                                            strState = "on";
                                                        }
                                                        else
                                                        {
                                                            strState = "off";
                                                        }
                                                        int dl = sl.getValue();
                                                        String strJson = "{\"action\":\"control\",\"code\":{\"device\":\""+ d.getName() + "\",\"state\":\"" + strState + "\",\"values\":{\"dimlevel\":" + dl + "}}}\n"; 
                                                        printStream.print("{\"action\":\"identify\"}\n");
                                                        printStream.flush();
                                                        printStream.print(strJson);
                                                        printStream.flush();
                                                    }

                                                    @Override
                                                    public void mouseEntered(MouseEvent e) {
                                                    }

                                                    @Override
                                                    public void mouseExited(MouseEvent e) {
                                                    }
                                                });
                                                pan.add(pb).setVisible(d.getState() == 1?true:false);
                                                ActionList = new ArrayList<>();
                                                ActionList.add(sl);
                                                pb.setValue(d.getDimlevel());
                                                ActionList.add(pb);
                                                d.setAction(ActionList);
                                                break;
                                                        
                                            case 8:    //Date + Time
                                                tf = new JTextField(d.getGUIName() + ": ");
                                                r = tf.getBounds();
                                                tfDim = tf.getPreferredSize();
                                                strProp = prop.getProperty(d.getGUIName());
                                                if(strProp == null)
                                                {
                                                    r.setBounds(5, 20 + NoOfElements[g-1]*50, tfDim.width, tfDim.height);
                                                }
                                                else
                                                {
                                                    String[] strR = strProp.split(";");
                                                    if(strR.length != 2)
                                                    {
                                                        r.setBounds(5, 20 + NoOfElements[g-1]*50, tfDim.width, tfDim.height);
                                                    }
                                                    else
                                                    {
                                                        int iX = Integer.parseInt(strR[0]);
                                                        int iY = Integer.parseInt(strR[1]);
                                                        r.setBounds(iX, iY, tfDim.width, tfDim.height);
                                                    }
                                                }
                                                NoOfElements[g-1]++;
                                                JLabel tf1 = new JLabel(d.getYear() + " / " + d.getMonth() + " / " + d.getDay() + " --- " + d.getHour() + ":" + d.getMinute() + ":" + d.getSecond());
                                                tf1.setOpaque(true);
                                                tf.setBounds(r);
                                                tf.setEditable(false);
                                                tf.addMouseMotionListener(new java.awt.event.MouseMotionListener() {
                                                    @Override
                                                    public void mouseDragged(MouseEvent e) {
                                                       int x =  e.getXOnScreen();
                                                       x -= pan.getLocationOnScreen().x;
                                                       if (x > PicWidth - 20)
                                                           x = PicWidth - 20;
                                                       int y = e.getYOnScreen();
                                                       y -= pan.getLocationOnScreen().y;
                                                       if(y > PicHeigth - 20)
                                                           y = PicHeigth - 20;
                                                       tf.setBounds(x, y, tf.getWidth(), tf.getHeight());
                                                       tf1.setBounds(x + 5 + tfDim.width, y, tf1.getPreferredSize().width, tf1.getPreferredSize().height);
                                                    }

                                                    @Override
                                                    public void mouseMoved(MouseEvent e) {
                                                        
                                                    }
                                                });
                                                tf.addMouseListener(new java.awt.event.MouseListener() {

                                                    @Override
                                                    public void mouseClicked(MouseEvent e) {
                                                    }

                                                    @Override
                                                    public void mousePressed(MouseEvent e) {
                                                    }

                                                    @Override
                                                    public void mouseReleased(MouseEvent e) {
                                                        Properties prop = new Properties();
                                                        try {
                                                            prop.load(new FileInputStream(gsConfigFilename));
                                                            //hier neue Koordinaten abspeichern
                                                            } catch (FileNotFoundException ex) {
                                                                File f = new File(myHome.gsConfigDirectory);
                                                                Boolean b = f.mkdir();
                                                                f = new File(gsConfigFilename);
                                                                try {
                                                                    f.createNewFile();
                                                                } catch (IOException ex1) {
                                                                    Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex1);
                                                                }
                                                            } catch (IOException ex) {
                                                                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
                                                            }
                                                        prop.setProperty(d.getGUIName(), "" + tf.getBounds().x + ";" + tf.getBounds().y);
                                                        try {
                                                            prop.store(new FileOutputStream(myHome.gsConfigFilename), "Properties");
                                                            } catch (FileNotFoundException ex) {
                                                                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
                                                            } catch (IOException ex) {
                                                                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
                                                            }
                                                    }

                                                    @Override
                                                    public void mouseEntered(MouseEvent e) {
                                                    }

                                                    @Override
                                                    public void mouseExited(MouseEvent e) {
                                                    }
                                                });
                                                tf1.setBounds(r.x + 5 + tfDim.width, r.y, tf1.getPreferredSize().width, tf1.getPreferredSize().height);
                                                pan.add(tf1).setVisible(true);
                                                d.setSingleAction(tf1);                                                
                                                pan.add(tf).setVisible(true);
                                                break;
                                                        
                                            case 15:    //Label
                                                tf = new JTextField(d.getGUIName() + ": ");
                                                tf1 = new JLabel();

                                                f = new File(myHome.gsConfigDirectory + d.getLabel() + ".jpg");
                                                if(f.exists())
                                                {
                                                    Room = new ImageIcon(myHome.gsConfigDirectory + d.getLabel() + ".jpg");
                                                    tf1.setIcon(Room);
                                                }
                                                else
                                                {
                                                    f = new File(myHome.gsConfigDirectory + d.getLabel() + ".png");
                                                    if(f.exists())
                                                        tf1.setIcon(new ImageIcon(myHome.gsConfigDirectory + d.getLabel() + ".png"));
                                                    else
                                                    {
                                                        f = new File(myHome.gsConfigDirectory + d.getLabel() + ".gif");
                                                        if(f.exists())
                                                        {
                                                            tf1.setIcon(new ImageIcon(myHome.gsConfigDirectory + d.getLabel() + ".gif"));
                                                        }
                                                        else
                                                        {
                                                            tf1.setText(" " + d.getLabel() + " ");
                                                            tf1.setForeground(convertColorString(d.getLabelColor()));
                                                            tf1.setOpaque(true);
                                                        }
                                                    }
                                                }
                                                r = tf.getBounds();
                                                tfDim = tf.getPreferredSize();
                                                strProp = prop.getProperty(d.getGUIName());
                                                if(strProp == null)
                                                {
                                                    r.setBounds(5, 20 + NoOfElements[g-1]*50, tfDim.width, tfDim.height);
                                                }
                                                else
                                                {
                                                    String[] strR = strProp.split(";");
                                                    if(strR.length != 2)
                                                    {
                                                        r.setBounds(5, 20 + NoOfElements[g-1]*50, tfDim.width, tfDim.height);
                                                    }
                                                    else
                                                    {
                                                        int iX = Integer.parseInt(strR[0]);
                                                        int iY = Integer.parseInt(strR[1]);
                                                        r.setBounds(iX, iY, tfDim.width, tfDim.height);
                                                    }
                                                }
                                                NoOfElements[g-1]++;
                                                tf.setBounds(r);
                                                tf.setEditable(false);
                                                tf.addMouseMotionListener(new java.awt.event.MouseMotionListener() {
                                                    @Override
                                                    public void mouseDragged(MouseEvent e) {
                                                       int x =  e.getXOnScreen();
                                                       x -= pan.getLocationOnScreen().x;
                                                       if (x > PicWidth - 20)
                                                           x = PicWidth - 20;
                                                       int y = e.getYOnScreen();
                                                       y -= pan.getLocationOnScreen().y;
                                                       if(y > PicHeigth - 20)
                                                           y = PicHeigth - 20;
//                                                       r.setBounds(x, y, r.width, r.height); 
                                                       tf.setBounds(x, y, tf.getWidth(), tf.getHeight());
                                                       tf1.setBounds(x + 5 + tfDim.width, y, tf1.getPreferredSize().width, tf1.getPreferredSize().height);
                                                    }

                                                    @Override
                                                    public void mouseMoved(MouseEvent e) {
                                                        
                                                    }
                                                });
                                                tf.addMouseListener(new java.awt.event.MouseListener() {

                                                    @Override
                                                    public void mouseClicked(MouseEvent e) {
                                                    }

                                                    @Override
                                                    public void mousePressed(MouseEvent e) {
                                                    }

                                                    @Override
                                                    public void mouseReleased(MouseEvent e) {
                                                        Properties prop = new Properties();
                                                        try {
                                                            prop.load(new FileInputStream(gsConfigFilename));
                                                            //hier neue Koordinaten abspeichern
                                                            } catch (FileNotFoundException ex) {
                                                                File f = new File(myHome.gsConfigDirectory);
                                                                Boolean b = f.mkdir();
                                                                f = new File(gsConfigFilename);
                                                                try {
                                                                    f.createNewFile();
                                                                } catch (IOException ex1) {
                                                                    Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex1);
                                                                }
                                                            } catch (IOException ex) {
                                                                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
                                                            }
                                                        prop.setProperty(d.getGUIName(), "" + tf.getBounds().x + ";" + tf.getBounds().y);
                                                        try {
                                                            prop.store(new FileOutputStream(myHome.gsConfigFilename), "Properties");
                                                            } catch (FileNotFoundException ex) {
                                                                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
                                                            } catch (IOException ex) {
                                                                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
                                                            }
                                                    }

                                                    @Override
                                                    public void mouseEntered(MouseEvent e) {
                                                    }

                                                    @Override
                                                    public void mouseExited(MouseEvent e) {
                                                    }
                                                });
                                                tf1.setBounds(r.x + 5 + tfDim.width, r.y, tf1.getPreferredSize().width, tf1.getPreferredSize().height);
                                                d.setSingleAction(tf1);
                                                pan.add(tf1).setVisible(true);
                                                pan.add(tf).setVisible(true);
                                                break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        s =java.util.ResourceBundle.getBundle("mysmarthome/Bundle").getString("contactfailed");
                        JOptionPane.showMessageDialog(null, s);
                        System.exit(0);
                    }
                }
                else
                {
                    s =java.util.ResourceBundle.getBundle("mysmarthome/Bundle").getString("contactfailed");
                    JOptionPane.showMessageDialog(null, s);
                    System.exit(0);
                }
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
            }

            Timer timer = new Timer(6000, new java.awt.event.ActionListener() {

                @Override 
                public void actionPerformed(ActionEvent e) {
                    // this is a 6 seconds timer
                    if(bHeartSent)
                    {
                        JOptionPane.showMessageDialog(null, java.util.ResourceBundle.getBundle("mysmarthome/Bundle").getString("lostConnection"));
                        System.exit(0);
                    }
                    int i = 0;
                    if((i++ % 10) == 0)
                    {   //every minute...
                        Date date = new Date();
                        String format = sdf.format(date);
                        nDay = format.indexOf('.');
                        nDay = Integer.parseInt(format.substring(0, nDay));
                    }
                    bHeartSent = true;
                }
            });
            timer.start();
            
            Thread pilightCore = new Thread()
            {
                String strMeldungen = null;
                public void run() 
                {
                    try {
                        if(bufferedReader == null) {
                            bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8"), size);
                        }
                        printStream.print("{\"action\":\"identify\",\"options\":{\"core\":0,\"receiver\":0,\"config\":1,\"forward\":0,\"stats\":1}}\n");
                        printStream.flush();
                        int c;
                        String s;
                        StringBuilder response = new StringBuilder();
                        while(true)
                        {
                           if(bufferedReader.ready()) {
                               while((c = bufferedReader.read()) != '\n') {
                                   response.append((char)c);
                               }
                               strMeldungen = response.toString() + '\n';
                               response.delete(0, 1025);
                               if(strMeldungen.contains("cpu"))
                               {
                                   c = strMeldungen.indexOf("\"cpu\"");
                                   s = strMeldungen.substring(c, c + 15);
                                   jCPU.setText(s);
                                   if(strMeldungen.contains("ram"))
                                   {
                                       bHeartSent = false;
                                       c = strMeldungen.indexOf("\"ram\"");
                                       s = strMeldungen.substring(c, c + 15);
                                       jRAM.setText(s);
                                   }
                               }
                               boolean bDev = false;
                               for (Object myDevice : myDevices) {
                                   Devices dev = (Devices) myDevice;
                                   if(strMeldungen.contains("[\"" + dev.getName() + "\"]"))
                                   {
                                       int nLauf;
                                       switch(dev.getType())
                                       {
                                           case 1:
                                           case 4:
                                           case 6:
                                               if(bDev)
                                                   break;
                                               bDev = true;
                                                nLauf = strMeldungen.indexOf("state");
                                                if(nLauf > 0)
                                                {
                                                    s = strMeldungen.substring(nLauf + 6, strMeldungen.length());
                                                    if(s.contains(":\"on"))
                                                    {
                                                       dev.setState(1);
                                                       JButton bn = (JButton)dev.getSingleAction();
                                                       bn.setIcon(dev.getIconOn());
                                                    }
                                                    else if(s.contains("off"))
                                                    {
                                                       dev.setState(0);
                                                       JButton bn = (JButton)dev.getSingleAction();
                                                       bn.setIcon(dev.getIconOff());
                                                    }
                                                }
                                               break;
                                               
                                           case 2:
                                               if(bDev)
                                                   break;
                                               bDev = true;
                                               nLauf = strMeldungen.indexOf("state");
                                               s = strMeldungen.substring(nLauf + 6, strMeldungen.length());
                                               JProgressBar pb = (JProgressBar) dev.getAction().get(1);
                                               if(s.contains("on"))
                                               {
                                                   dev.setState(1);
                                                   pb.setVisible(true);
                                                   pb.setValue(dev.getDimlevel());
                                               }
                                               else
                                               {
                                                   dev.setState(0);
                                                   pb.setVisible(false);
                                               }
                                               if(s.contains("dimlevel\""))
                                               {
                                                    nLauf = s.indexOf("dimlevel\"");
                                                    s = s.substring(nLauf + 10, s.length());
                                                    nLauf = s.indexOf("}");
                                                    s = s.substring(0, nLauf);
                                                    dev.setDimlevel(Integer.parseInt(s));
                                                    pb = (JProgressBar) dev.getAction().get(1);
                                                    pb.setValue(dev.getDimlevel());
                                               }
                                               break;
                                               
                                           case 3:
                                               if(bDev)
                                                   break;
                                               bDev = true;
                                                JButton bn;
                                                if(strMeldungen.contains("\"humidity\":"))
                                                {
                                                    nLauf = strMeldungen.indexOf("\"humidity\":");
                                                    String str = strMeldungen.substring(nLauf + 11, strMeldungen.length());
                                                    nLauf = str.indexOf(",\"");
                                                    if(nLauf == -1)
                                                        nLauf = str.indexOf("}");
                                                    dev.setHumidity(str.substring(0,nLauf));
                                                    bn = (JButton)dev.getAction().get(0);
                                                    if(bn != null)
                                                        bn.setText(dev.getHumidity());
                                                }
                                                if(strMeldungen.contains("\"temperature\":"))
                                                {
                                                    nLauf = strMeldungen.indexOf("\"temperature\":");
                                                    String str = strMeldungen.substring(nLauf + 14, strMeldungen.length());
                                                    nLauf = str.indexOf(".") + 2;
                                                    if(nLauf == -1)
                                                        nLauf = str.indexOf("}");
                                                    dev.setTemperature(str.substring(0,nLauf));
                                                    bn = (JButton)dev.getAction().get(1);
                                                    if(bn != null)
                                                    {
                                                        bn.setText(dev.getTemperature() + "°C");
                                                        if(nDay != dev.getnDay())
                                                        {
                                                            byte n = dev.getMaxTemperature();
                                                            dev.addTemp(n);
                                                            dev.setnday(nDay);
                                                        }
                                                        if(dev.bMustAddTemp)
                                                        {
                                                            byte n = dev.getMaxTemperature();
                                                            dev.addTemp(n);
                                                            dev.setnday(nDay);
                                                            dev.bMustAddTemp = false;
                                                        }
                                                    }
                                                }
                                                if(strMeldungen.contains("\"pressure\":"))
                                                {
                                                    nLauf = strMeldungen.indexOf("\"pressure\":");
                                                    String str = strMeldungen.substring(nLauf + 11, strMeldungen.length());
                                                    nLauf = str.indexOf(",\"");
                                                    if(nLauf == -1)
                                                        nLauf = str.indexOf("}");
                                                    dev.setAirPressure(str.substring(0,nLauf));
                                                    bn = (JButton)dev.getAction().get(2);
                                                    if(bn != null)
                                                        bn.setText(dev.getAirPressure() + "hPa");
                                                }
                                                if(strMeldungen.contains("\"sunrise\":"))
                                                {
                                                    nLauf = strMeldungen.indexOf("\"sunrise\":");
                                                    String str = strMeldungen.substring(nLauf + 10, strMeldungen.length());
                                                    nLauf = str.indexOf(",\"");
                                                    if(nLauf == -1)
                                                        nLauf = str.indexOf("}");
                                                    dev.setSunrise(str.substring(0,nLauf));
                                                    bn = (JButton)dev.getAction().get(3);
                                                    if(bn != null)
                                                        bn.setText(dev.getSunrise());
                                                }
                                                if(strMeldungen.contains("\"sunset\":"))
                                                {
                                                    nLauf = strMeldungen.indexOf("\"sunset\":");
                                                    String str = strMeldungen.substring(nLauf + 9, strMeldungen.length());
                                                    nLauf = str.indexOf(",\"");
                                                    if(nLauf == -1)
                                                        nLauf = str.indexOf("}");
                                                    dev.setSunset(str.substring(0,nLauf));
                                                    bn = (JButton)dev.getAction().get(4);
                                                    if(bn != null)
                                                        bn.setText(dev.getSunset());
                                                }
                                               break;
                                               
                                           case 8:
                                               if(bDev)
                                                   break;
                                               bDev = true;
//{"origin":"update","type":8,"devices":["zeit"],"values":{"timestamp":1444751962,"year":2015,"month":10,"day":13,"hour":16,"minute":59,"second":22,"weekday":3,"dst":0}}   
                                               nLauf = strMeldungen.indexOf("year");
                                               s = strMeldungen.substring(nLauf + 6, strMeldungen.length());
                                               nLauf = s.indexOf(",\"");
                                               dev.setYear(s.substring(0, nLauf));
                                               nLauf = strMeldungen.indexOf("month");
                                               s = strMeldungen.substring(nLauf + 7, strMeldungen.length());
                                               nLauf = s.indexOf(",\"");
                                               dev.setMonth(s.substring(0, nLauf));
                                               nLauf = strMeldungen.indexOf("day");
                                               s = strMeldungen.substring(nLauf + 5, strMeldungen.length());
                                               nLauf = s.indexOf(",\"");
                                               dev.setDay(s.substring(0, nLauf));
                                               nLauf = strMeldungen.indexOf("hour");
                                               s = strMeldungen.substring(nLauf + 6, strMeldungen.length());
                                               nLauf = s.indexOf(",\"");
                                               dev.setHour(s.substring(0, nLauf));
                                               nLauf = strMeldungen.indexOf("minute");
                                               s = strMeldungen.substring(nLauf + 8, strMeldungen.length());
                                               nLauf = s.indexOf(",\"");
                                               dev.setMinute(s.substring(0, nLauf));
                                               nLauf = strMeldungen.indexOf("second");
                                               s = strMeldungen.substring(nLauf + 8, strMeldungen.length());
                                               nLauf = s.indexOf(",\"");
                                               dev.setSecond(s.substring(0, nLauf));
                                               JLabel tf = (JLabel)dev.getSingleAction();
                                               tf.setText(dev.getYear() + " / " + dev.getMonth() + " / " + dev.getDay() + " --- " + dev.getHour() + ":" + dev.getMinute() + ":" + dev.getSecond());
                                               tf.setBounds(tf.getBounds().x, tf.getBounds().y, tf.getPreferredSize().width, tf.getPreferredSize().height);
                                               break;
                                               
                                           case 15:
                                               if(bDev)
                                                   break;
                                               bDev = true;
                                                nLauf = strMeldungen.indexOf("label");
                                                if(nLauf > 0)
                                                {
                                                    s = strMeldungen.substring(nLauf + 8, strMeldungen.length());
                                                    nLauf = s.indexOf("\",\"");
                                                    if(nLauf == -1)
                                                        nLauf = s.indexOf("}");
                                                    dev.setLabel(s.substring(0, nLauf));
                                                    tf = (JLabel)dev.getSingleAction();
                                                    File f = new File(myHome.gsConfigDirectory + dev.getLabel() + ".jpg");
                                                    if(f.exists())
                                                    {
                                                        Room = new ImageIcon(myHome.gsConfigDirectory + dev.getLabel() + ".jpg");
                                                        tf.setIcon(Room);
                                                        tf.setText("");
                                                        tf.setBounds(tf.getBounds().x, tf.getBounds().y, tf.getPreferredSize().width, tf.getPreferredSize().height);
                                                    }
                                                    else
                                                    {
                                                        f = new File(myHome.gsConfigDirectory + dev.getLabel() + ".png");
                                                        if(f.exists())
                                                        {
                                                            Room = new ImageIcon(myHome.gsConfigDirectory + dev.getLabel() + ".png");
                                                            tf.setIcon(Room);
                                                            tf.setText("");
                                                            tf.setBounds(tf.getBounds().x, tf.getBounds().y, tf.getPreferredSize().width, tf.getPreferredSize().height);
                                                        }
                                                        else
                                                        {
                                                            tf.setText(" " + dev.getLabel() + " ");
                                                            tf.setOpaque(true);
                                                            tf.setForeground(convertColorString(dev.getLabelColor()));
                                                            tf.setIcon(null);
                                                            tf.setBounds(tf.getBounds().x, tf.getBounds().y, tf.getPreferredSize().width, tf.getPreferredSize().height);
                                                        }
                                                    }
                                                }
                                               break;
                                       }
                                   }
                               }
                               strMeldungen = "";
                           }
                       }
                    } catch (IOException ex) {
                        Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
            pilightCore.start();

        } catch (IOException ex) {
            Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
        }
        Properties prop = new Properties();
        try {
            prop.load(new FileInputStream(gsConfigFilename));
            //hier neue Koordinaten abspeichern
            } catch (FileNotFoundException ex) {
                File f = new File(myHome.gsConfigDirectory);
                Boolean b = f.mkdir();
                f = new File(gsConfigFilename);
                try {
                    f.createNewFile();
                } catch (IOException ex1) {
                    Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex1);
                }
            } catch (IOException ex) {
                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
            }
            String s = prop.getProperty("ShowOverview","true");
            if(s.equals("false"))
            {
                jTabbedPane.remove(0);
                jShowOverview.setSelected(false);
            }
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JHelp HLP = new JHelp(0);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JHelp HLP = new JHelp(1);
        String str = "";
        for (String strConfig1 : strConfig) {
            strConfig1 += ",";
            str += strConfig1 + "\n";
            if(strConfig1.contains("},"))
                str += "\n";
        }
        HLP.setTextInArea(str);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jShowOverviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jShowOverviewActionPerformed
        Boolean bMustShow;
        
        if(jShowOverview.isSelected())
        {
            bMustShow = true;
            String s = java.util.ResourceBundle.getBundle("mysmarthome/Bundle").getString("overview");
            JOptionPane.showMessageDialog(null, s);
        }
        else
        {
            if(!bMustNotDeleteAgain) jTabbedPane.remove(0); 
            bMustShow = false;
            bMustNotDeleteAgain = true;
        }
        Properties prop = new Properties();
        try {
            prop.load(new FileInputStream(gsConfigFilename));
            //hier neue Koordinaten abspeichern
            } catch (FileNotFoundException ex) {
                File f = new File(myHome.gsConfigDirectory);
                Boolean b = f.mkdir();
                f = new File(gsConfigFilename);
                try {
                    f.createNewFile();
                } catch (IOException ex1) {
                    Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex1);
                }
            } catch (IOException ex) {
                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
            }
        prop.setProperty("ShowOverview", "" + bMustShow);
        try {
            prop.store(new FileOutputStream(myHome.gsConfigFilename), "Properties");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(myHome.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_jShowOverviewActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(myHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(myHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(myHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(myHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new myHome().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jCPU;
    private javax.swing.JLabel jDaemon;
    private javax.swing.JButton jExit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jOverview;
    private javax.swing.JLabel jRAM;
    private javax.swing.JCheckBox jShowOverview;
    private javax.swing.JTabbedPane jTabbedPane;
    // End of variables declaration//GEN-END:variables
}
