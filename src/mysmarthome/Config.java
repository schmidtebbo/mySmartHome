/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mysmarthome;

import java.awt.Dimension;
import java.awt.Rectangle;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author ktams
 */
public class Config extends javax.swing.JFrame {

    
    static String  gsConfigDirectory = System.getProperty("user.home") + "/mySmartHome/";
    static String  gsConfigFilename  = System.getProperty("user.home") + "/mySmartHome/" + "properties";
    static String  gsConfigComment = "mySmartHome: last directory";

    File LastSelectedFile;

    char[] cbuf;
    
    ArrayList<String> DeviceList;
    ArrayList<String> GUIList;
    ArrayList<String> RulesList;
    
    DefaultListModel DevlistenModell;
    DefaultListModel GUIlistenModell;
    
    boolean bAktKonf = false;
    String strAktKonfiguration;
    String strDevices;
    String strRules;
    String strGUI;
    String strSettings;
    
    int Windows_X;
    Rectangle AdjBounds, AddGUI_ElementBounds, DelGUI_ElementBounds, LabelBounds, GUI_Bounds, GUI_ScrollBounds;
    Dimension DevicesScrollDimension, DevicesDimension;
    JHelp myParent;
    
    /**
     * Creates new form Config
     */
    public Config() {
        this.cbuf = null;
        this.LastSelectedFile = null;
        initComponents();
        ImageIcon II = new ImageIcon(getClass().getResource("pictures/Home.jpg"));
        this.setIconImage(II.getImage());
    }

    Config(String strAktKonf, JHelp aThis) {
        this.strAktKonfiguration = strAktKonf;
        int i = 0;
        String s = "";
        while(true)
        {    
            i = strAktKonfiguration.indexOf("(");
            if(i == -1)
            {
                s += strAktKonfiguration;
                strAktKonfiguration = s;
                break;
            }
            s += strAktKonfiguration.substring(0, i);
            strAktKonfiguration = strAktKonfiguration.substring(i);
            i = strAktKonfiguration.indexOf(")");
            String str = strAktKonfiguration.substring(0, i);
            if(str.contains("\n"))
            {
                str = str.replace("\n", "");
            }
            if(str.contains("\t"))
            {
                str = str.replace("\t", "");
            }
            s += str;
            strAktKonfiguration = strAktKonfiguration.substring(i, strAktKonfiguration.length());
        }
        while(true)
        {    
            i = strAktKonfiguration.indexOf("[");
            if(i == -1)
            {
                s += strAktKonfiguration;
                strAktKonfiguration = s;
                break;
            }
            s += strAktKonfiguration.substring(0, i);
            strAktKonfiguration = strAktKonfiguration.substring(i);
            i = strAktKonfiguration.indexOf("]");
            String str = strAktKonfiguration.substring(0, i);
            if(str.contains("\n"))
            {
                str = str.replace("\n", "");
            }
            if(str.contains("\t"))
            {
                str = str.replace("\t", "");
            }
            s += str;
            strAktKonfiguration = strAktKonfiguration.substring(i, strAktKonfiguration.length());
        }
        this.cbuf = null;
        this.LastSelectedFile = null;
        myParent = aThis;
        initComponents();
        ImageIcon II = new ImageIcon(getClass().getResource("pictures/Home.jpg"));
        this.setIconImage(II.getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jExit = new javax.swing.JButton();
        jSave = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jDevices = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jGUI = new javax.swing.JList();
        jLabelGUI = new javax.swing.JLabel();
        jNewDevice = new javax.swing.JButton();
        jDelDevice = new javax.swing.JButton();
        jAdjust = new javax.swing.JButton();
        jDelGUI_Element = new javax.swing.JButton();
        jRules = new javax.swing.JButton();
        jLoad = new javax.swing.JButton();
        jHelp = new javax.swing.JButton();
        jSettings = new javax.swing.JButton();
        jCopy = new javax.swing.JButton();
        jAddGUI_Element = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("mysmarthome/Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("Config.jLabel1.text")); // NOI18N

        jExit.setText(bundle.getString("Config.jExit.text")); // NOI18N
        jExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jExitActionPerformed(evt);
            }
        });

        jSave.setText(bundle.getString("Config.jSave.text")); // NOI18N
        jSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveActionPerformed(evt);
            }
        });

        jDevices.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "no device" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jDevices.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jDevices.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jDevicesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jDevices);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText(bundle.getString("Config.jLabel2.text")); // NOI18N

        jGUI.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "no GUI elements" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jGUI.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jGUI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jGUIMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jGUI);

        jLabelGUI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelGUI.setText(bundle.getString("Config.jLabelGUI.text")); // NOI18N

        jNewDevice.setText(bundle.getString("Config.jNewDevice.text")); // NOI18N
        jNewDevice.setEnabled(false);
        jNewDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNewDeviceActionPerformed(evt);
            }
        });

        jDelDevice.setText(bundle.getString("Config.jDelDevice.text")); // NOI18N
        jDelDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDelDeviceActionPerformed(evt);
            }
        });

        jAdjust.setText(bundle.getString("Config.jAdjust.text")); // NOI18N
        jAdjust.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jAdjustMouseDragged(evt);
            }
        });
        jAdjust.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jAdjustMousePressed(evt);
            }
        });
        jAdjust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAdjustActionPerformed(evt);
            }
        });

        jDelGUI_Element.setText(bundle.getString("Config.jDelGUI_Element.text")); // NOI18N
        jDelGUI_Element.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDelGUI_ElementActionPerformed(evt);
            }
        });

        jRules.setText(bundle.getString("Config.jRules.text")); // NOI18N
        jRules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRulesActionPerformed(evt);
            }
        });

        jLoad.setText(bundle.getString("Config.jLoad.text")); // NOI18N
        jLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLoadActionPerformed(evt);
            }
        });

        jHelp.setText(bundle.getString("Config.jHelp.text")); // NOI18N
        jHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jHelpActionPerformed(evt);
            }
        });

        jSettings.setText(bundle.getString("Config.jSettings.text")); // NOI18N
        jSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSettingsActionPerformed(evt);
            }
        });

        jCopy.setText(bundle.getString("Config.jCopy.text")); // NOI18N
        jCopy.setEnabled(false);
        jCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCopyActionPerformed(evt);
            }
        });

        jAddGUI_Element.setText(bundle.getString("Config.jAddGUI_Element.text")); // NOI18N
        jAddGUI_Element.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddGUI_ElementActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jAdjust, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jAddGUI_Element, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDelGUI_Element, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jNewDevice, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(jCopy, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(jDelDevice, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jExit, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(jRules, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(jSettings, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(251, 251, 251)
                                .addComponent(jLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jSave, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(275, 275, 275)
                                        .addComponent(jLabelGUI, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(296, 296, 296)
                                .addComponent(jHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel1))
                    .addComponent(jHelp))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabelGUI))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jAdjust)
                        .addGap(55, 55, 55)
                        .addComponent(jAddGUI_Element)
                        .addGap(6, 6, 6)
                        .addComponent(jDelGUI_Element))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jNewDevice)
                    .addComponent(jCopy)
                    .addComponent(jDelDevice))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jExit)
                    .addComponent(jRules)
                    .addComponent(jSettings)
                    .addComponent(jLoad)
                    .addComponent(jSave))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExitActionPerformed
        Rectangle bounds = this.getBounds();
        Properties prop = new Properties();
        try {
            prop.load(new FileInputStream(gsConfigFilename));
            //hier neue Koordinaten abspeichern
            } catch (FileNotFoundException ex) {
                File f = new File(Config.gsConfigDirectory);
                Boolean b = f.mkdir();
                f = new File(gsConfigFilename);
                try {
                    f.createNewFile();
                } catch (IOException ex1) {
                    Logger.getLogger(Config.class.getName()).log(Level.SEVERE, null, ex1);
                }
            } catch (IOException ex) {
                Logger.getLogger(Config.class.getName()).log(Level.SEVERE, null, ex);
            }
        prop.setProperty("SmartHome", "" + bounds.x + ";" + bounds.y);
        try {
            prop.store(new FileOutputStream(Config.gsConfigFilename), "Properties");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Config.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Config.class.getName()).log(Level.SEVERE, null, ex);
            }
        this.dispose();
    }//GEN-LAST:event_jExitActionPerformed

    private void jDelDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDelDeviceActionPerformed
        int selectedIndex = jDevices.getSelectedIndex()-1;
        if(selectedIndex < 0)
            return;
        String get = DeviceList.get(selectedIndex);
        get = get.substring(0, get.indexOf(":"));
        for (int i = 0; i < GUIList.size(); i++) 
        {
            String str = GUIList.get(i);
            str = str.substring(4, str.indexOf(":")-1);
            if(get.contains(str))
            {   // Entry exists!
                GUIList.remove(i);
                GUIlistenModell.remove(i+1);
                break;
            }
        }
        DeviceList.remove(selectedIndex);
        DevlistenModell.remove(selectedIndex+1);
    }//GEN-LAST:event_jDelDeviceActionPerformed

    private void jNewDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNewDeviceActionPerformed
        String str1;
        Properties prop = new Properties();
        try {
            prop.load(new FileInputStream(gsConfigFilename));
        } catch (FileNotFoundException ex) {
            File f = new File(Config.gsConfigDirectory);
            Boolean b = f.mkdir();
            try {
                f = new File(gsConfigFilename);
                f.createNewFile();
                prop.store(new FileOutputStream(Config.gsConfigFilename), Config.gsConfigComment);
                prop.setProperty("TemplateDir", System.getProperty("user.name"));
            } catch (FileNotFoundException ex1) {
                try {
                    prop.setProperty("TemplateDir", System.getProperty("user.name"));
                    prop.store(new FileOutputStream(Config.gsConfigFilename), Config.gsConfigComment);
                } catch (IOException ex2) {
                    Logger.getLogger(Config.class.getName()).log(Level.SEVERE, null, ex2);
                }
            } catch (IOException ex1) {
                Logger.getLogger(Config.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } catch (IOException ex) {
            Logger.getLogger(Config.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        str1 = prop.getProperty("TemplateDir");
        if(str1 == null)
            str1 = System.getProperty("user.name");
        JFileChooser fs = new JFileChooser();
        File curDir = new File(str1);       
        fs.setCurrentDirectory(curDir);
        FileFilter filter = new FileNameExtensionFilter("JSON file", "json");
        fs.addChoosableFileFilter(filter);
        fs.setAcceptAllFileFilterUsed(true);
        int ret = fs.showOpenDialog(this);
        if(ret == javax.swing.JFileChooser.APPROVE_OPTION)
        {
            File f = fs.getSelectedFile();
            cbuf = new char[(int)f.length()];
            String file_name = f.toString( );
            try {
                prop.setProperty("TemplateDir", file_name);
                prop.store(new FileOutputStream(Config.gsConfigFilename), Config.gsConfigComment);
                } catch (IOException ex) {
                Logger.getLogger(Config.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(file_name.contains(".json"))
            {
                try {
                    FileReader inputStream = new FileReader(file_name);
                    inputStream.read(cbuf);
                    inputStream.close();
                    NewDevice newDevice = new NewDevice(this, new String(cbuf), -1, -1);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Config.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Config.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "File has the wrong extension!");
            }
        }
    }//GEN-LAST:event_jNewDeviceActionPerformed

    private void jSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveActionPerformed
        JFileChooser fs = new JFileChooser();
        if(LastSelectedFile != null)
            fs.setCurrentDirectory(LastSelectedFile);
        FileFilter filter = new FileNameExtensionFilter("JSON file", "json");
        fs.addChoosableFileFilter(filter);
        fs.setAcceptAllFileFilterUsed(true);
        int ret = fs.showSaveDialog(this);
        if(ret == javax.swing.JFileChooser.APPROVE_OPTION)
        {
            //prepare Strings...
            //Device section
            strDevices = "";
            DeviceList.stream().map((get) -> get.substring(1, get.length())).forEach((get) -> {
                //strip leading \n
                strDevices += get + "},\n";
            });
            ret = strDevices.lastIndexOf(',');
            if(ret != -1)
            {
                strDevices = strDevices.substring(0, ret);
                strDevices += "\n\t},\n";
            }
            else
                strDevices += "\t},\n";
            
            //rules section
            strRules = "";
            RulesList.stream().map((get) -> get.substring(1, get.length())).forEach((get) -> {
                //strip leading \n
                strRules += get + "},\n";
            });
            ret = strRules.lastIndexOf(',');
            if(ret != -1)
            {
                strRules = strRules.substring(0, ret);
                strRules += "\n\t},\n";
            }
            else
                strRules += "\t},\n";
            //gui section
            strGUI = "";
            GUIList.stream().map((get) -> get.substring(1, get.length())).forEach((get) -> {
                //strip leading \n
                strGUI += get + "},\n";
            });
            ret = strGUI.lastIndexOf(',');
            if(ret != -1)
            {
                strGUI = strGUI.substring(0, ret);
                strGUI += "\n\t},\n";
            }
            else
                strGUI += "\t},\n";
            
            File f = fs.getSelectedFile();
            String file_name = f.toString( );
            if(!file_name.contains(".json"))
                file_name += ".json";
            try {
                FileWriter fw = new FileWriter(file_name);
                BufferedWriter bw = new BufferedWriter(fw);
                bw.write("{\n\t\"devices\": {\n");
                bw.write(strDevices);
                bw.write("\t\"rules\": {\n");
                bw.write(strRules);
                bw.write("\t\"gui\": {\n");
                bw.write(strGUI);
                bw.write("\t\"settings\":");
                bw.write(strSettings);
                bw.close();
                fw.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Problems to write file. File was not written!");
            }
        }
    }//GEN-LAST:event_jSaveActionPerformed

    private void jAdjustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAdjustActionPerformed

    }//GEN-LAST:event_jAdjustActionPerformed

    private void jDelGUI_ElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDelGUI_ElementActionPerformed
        int selectedIndex = jGUI.getSelectedIndex()-1;
        if(selectedIndex < 0)
            return;
        GUIlistenModell.remove(selectedIndex+1);
        GUIList.remove(selectedIndex);
    }//GEN-LAST:event_jDelGUI_ElementActionPerformed

    private void jRulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRulesActionPerformed
        Rules re = new Rules(this);
        re.setVisible(true);
    }//GEN-LAST:event_jRulesActionPerformed

    private void jLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLoadActionPerformed
        String str1;
        Properties prop = new Properties();
        try {
            prop.load(new FileInputStream(gsConfigFilename));
        } catch (FileNotFoundException ex) {
            File f = new File(Config.gsConfigDirectory);
            Boolean b = f.mkdir();
            try {
                f = new File(gsConfigFilename);
                f.createNewFile();
                prop.store(new FileOutputStream(Config.gsConfigFilename), Config.gsConfigComment);
                prop.setProperty("DefDir", System.getProperty("user.name"));
            } catch (FileNotFoundException ex1) {
                try {
                    prop.setProperty("DefDir", System.getProperty("user.name"));
                    prop.store(new FileOutputStream(Config.gsConfigFilename), Config.gsConfigComment);
                } catch (IOException ex2) {
                    Logger.getLogger(Config.class.getName()).log(Level.SEVERE, null, ex2);
                }
            } catch (IOException ex1) {
                Logger.getLogger(Config.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } catch (IOException ex) {
            Logger.getLogger(Config.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        str1 = prop.getProperty("DefDir");
        if(str1 == null)
            str1 = System.getProperty("user.name");
        JFileChooser fs = new JFileChooser();
        File curDir = new File(str1);       
        fs.setCurrentDirectory(curDir);
        FileFilter filter = new FileNameExtensionFilter("JSON file", "json");
        fs.addChoosableFileFilter(filter);
        fs.setAcceptAllFileFilterUsed(true);
        int ret = fs.showOpenDialog(this);
        if(ret == javax.swing.JFileChooser.APPROVE_OPTION)
        {
            File f = fs.getSelectedFile();
            LastSelectedFile = f;
            cbuf = new char[(int)f.length()];
            String file_name = f.toString( );
            try {
                prop.setProperty("DefDir", file_name);
                prop.store(new FileOutputStream(Config.gsConfigFilename), Config.gsConfigComment);
                } catch (IOException ex) {
                Logger.getLogger(Config.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(file_name != null)
            {
                int length = file_name.length();
                try {
                    FileReader inputStream = new FileReader(file_name);
                    inputStream.read(cbuf);
                    inputStream.close();
                    String str = new String(cbuf);
                    if(!str.contains("pilight"))
                    {
                        JOptionPane.showMessageDialog(null, "wrong file selected");
                        return;
                    }
                    int i = str.indexOf(":");
                    str = str.substring(i+3, str.length());
                    String[] dev = str.split("rules\":");    //dev[0] contains all devices...
                    strDevices = dev[0].substring(1, dev[0].lastIndexOf("}")+1);
                    String[] gui = dev[1].split("gui\":");   //gui[0] contains the rules, gui[1] contains the gui elements and settings
                    strRules = gui[0].substring(0, gui[0].length());
                    i = strRules.indexOf("{");
                    strRules = strRules.substring(i+1, strRules.length());  //strip leading {
                    String[] Temp = gui[1].split("settings\":");
                    i = Temp[0].indexOf("{");
                    strGUI = Temp[0].substring(i+1, Temp[0].lastIndexOf("}")+1);
                    Temp = dev[1].split("settings\":");
                    strSettings = Temp[1].substring(0, Temp[1].length());
                    DeviceList = new ArrayList<>();
                    Temp = dev[0].split("},");
                    i = Temp[Temp.length-2].lastIndexOf('}');
                    if(i != -1)
                    {
                        Temp[Temp.length-2] = Temp[Temp.length-2].substring(0, i);
                    }
                    DeviceList.addAll(Arrays.asList(Temp));
                    jDevices.removeAll();
                    DevlistenModell = new DefaultListModel();
                    DeviceList.remove(DeviceList.size()-1);
                    DevlistenModell.addElement("<html><pre>Device\t\t[ \"protocol\" ]</pre></html>");
                    
                    for( i = 0; i < DeviceList.size(); i++)
                    {
                        String[] tmp = Temp[i].split("\n");
                        if(tmp.length < 4)
                        {
                            DeviceList.remove(i);
                            break;
                        }
                        str = tmp[1].substring(tmp[1].indexOf("\"") + 1, tmp[1].length());
                        str = "<html><pre>" + str.substring(0, str.indexOf("\"")) + "\t";
                        str += tmp[2].substring(tmp[2].indexOf(":") + 1, tmp[2].length()) + "</pre></html>";
                        DevlistenModell.addElement(str);
                    }
                    jDevices.setModel(DevlistenModell);
                    
                    RulesList = new ArrayList<>();
                    Temp = strRules.split("},");
                    i = Temp[Temp.length-2].lastIndexOf('}');
                    if(i != -1)
                    {
                        Temp[Temp.length-2] = Temp[Temp.length-2].substring(0, i);
                        RulesList.addAll(Arrays.asList(Temp));
                        RulesList.remove(RulesList.size()-1);
                    }
                    
                    GUIList = new ArrayList<>();
                    i = gui[1].indexOf("{");
                    gui[1] = gui[1].substring(i+1, gui[1].length());
                    Temp = gui[1].split("settings");
                    Temp[0] = Temp[0].substring(0, Temp[0].length());
                    Temp = Temp[0].split("},");
                    i = Temp[Temp.length-2].lastIndexOf('}');
                    if(i != -1)
                    {
                        Temp[Temp.length-2] = Temp[Temp.length-2].substring(0, i);
                    }
                    GUIList.addAll(Arrays.asList(Temp));
                    GUIList.remove(GUIList.size() - 1);
                    jGUI.removeAll();
                    GUIlistenModell = new DefaultListModel();
                    GUIlistenModell.addElement("<html><pre>Device\t\t\"name\"\t\t[ \"group\" ] </pre></html>");
                    for( i = 0; i < GUIList.size(); i++)
                    {
                        String[] tmp = Temp[i].split("\n");
                        if(tmp.length < 4)
                        {
                            GUIList.remove(i);
                            break;
                        }
                        str = tmp[1].substring(tmp[1].indexOf("\"") + 1, tmp[1].length());
                        str = "<html><pre>" + str.substring(0, str.indexOf("\"")) + "\t";
                        str += tmp[2].substring(tmp[2].indexOf(":") + 1, tmp[2].length())+ "\t";
                        str += tmp[3].substring(tmp[3].indexOf(":") + 1, tmp[3].length()) + "</pre></html>";
                        GUIlistenModell.addElement(str);
                    }
                    jGUI.setModel(GUIlistenModell);
                    jNewDevice.setEnabled(true);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Config.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(Config.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Problems opening the file");
            }
        }
    }//GEN-LAST:event_jLoadActionPerformed

    private void jHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jHelpActionPerformed
        Help help = new Help();
    }//GEN-LAST:event_jHelpActionPerformed

    private void jDevicesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jDevicesMouseClicked
        int selectedIndex = jDevices.getSelectedIndex()-1;
        if(selectedIndex < 0)
        {
            jDevices.clearSelection();
            jGUI.clearSelection();
            jCopy.setEnabled(false);
            return;
        }
        jCopy.setEnabled(true);
        String get = DeviceList.get(selectedIndex);
        if(evt.getClickCount() == 2)
        {
            if(cbuf == null)
            {
                NewDevice newDevice = new NewDevice(this, strDevices, selectedIndex,jGUI.getSelectedIndex());   
            }
            else
            {
                NewDevice newDevice = new NewDevice(this, new String(cbuf), selectedIndex,jGUI.getSelectedIndex());
            }
        }
        else
        {
            get = get.substring(get.indexOf("\""), get.indexOf(":"));
            jGUI.clearSelection();
            for(int i = 0; i < GUIList.size(); i++)
            {
                String str = GUIList.get(i);
                str = str.substring(str.indexOf("\""), str.indexOf(":"));
                if(get.equals(str))
                {
                    jGUI.setSelectedIndex(i+1);
                    jGUI.ensureIndexIsVisible(i+1);
                    break;
                }
            }
        }
    }//GEN-LAST:event_jDevicesMouseClicked

    private void jGUIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jGUIMouseClicked
        int selectedIndex = jGUI.getSelectedIndex()-1;
        if(selectedIndex < 0)
            return;
        String get = GUIList.get(selectedIndex);
        if(evt.getClickCount() == 2)
        {
            GuiEditor ge = new GuiEditor(this, selectedIndex);
            ge.setVisible(true);
        }
        else
        {
            get = get.substring(0, get.indexOf(":"));
            for(int i = 0; i < DeviceList.size(); i++)
            {
                String str = DeviceList.get(i);
                str = str.substring(4, str.indexOf(":")-1);
                if(get.contains(str))
                {
                    jDevices.setSelectedIndex(i+1);
                    jDevices.ensureIndexIsVisible(i+1);
                    break;
                }
            }            
        }

    }//GEN-LAST:event_jGUIMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Properties prop = new Properties();
        try {
            prop.load(new FileInputStream(gsConfigFilename));
        } catch (FileNotFoundException ex) {
            File f = new File(Config.gsConfigDirectory);
            Boolean b = f.mkdir();
            f = new File(gsConfigFilename);
            try {
                f.createNewFile();
            } catch (IOException ex1) {
                Logger.getLogger(Config.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } catch (IOException ex) {
            Logger.getLogger(Config.class.getName()).log(Level.SEVERE, null, ex);
        }
        String s = prop.getProperty("pilightConf",""+(myParent.getBounds().x + 10)+";"+(myParent.getBounds().y + 10));
        String strBounds[] = s.split(";");
        Rectangle bounds = this.getBounds();
        bounds.x = Integer.parseInt(strBounds[0]);
        bounds.y = Integer.parseInt(strBounds[1]);
        this.setBounds(bounds);
        if(strAktKonfiguration != null)
        {
            String str = strAktKonfiguration;
            bAktKonf = true;
        
            int i = str.indexOf("ces\":{");
            str = str.substring(i+6, str.length());
            str = str.replaceAll("\n\n", "\n");
            str = str.replaceAll("\n", "\t\n");
            String[] dev = str.split("rules\":");    //dev[0] contains all devices...
            strDevices = dev[0].substring(1, dev[0].lastIndexOf("}")+1);
            String[] gui = dev[1].split("gui\":");   //gui[0] contains the rules, gui[1] contains the gui elements and settings
            strRules = gui[0].substring(0, gui[0].length());
            i = strRules.indexOf("{");
            strRules = strRules.substring(i+1, strRules.length());  //strip leading {
            String[] Temp = gui[1].split("settings\":");
            i = Temp[0].indexOf("{");
            strGUI = Temp[0].substring(i+1, Temp[0].lastIndexOf("}")+1);
            Temp = dev[1].split("settings\":");
            strSettings = Temp[1].substring(0, Temp[1].length());
            strSettings = strSettings.replace("{", "{\n\t\t");
            strSettings = strSettings.replace("}", "\n}");
            strSettings = strSettings.replace("\n", "\n\t\t");
            i = strSettings.lastIndexOf("},");
            strSettings = strSettings.substring(0, i);
            DeviceList = new ArrayList<>();
            Temp = dev[0].split("},");
            i = Temp[Temp.length-2].lastIndexOf('}');
            if(i != -1)
            {
                Temp[Temp.length-2] = Temp[Temp.length-2].substring(0, i);
            }
            Temp[0] = "\t\n" + Temp[0];             //adjust first element
            DeviceList.addAll(Arrays.asList(Temp));
            jDevices.removeAll();
            DevlistenModell = new DefaultListModel();
            DeviceList.remove(DeviceList.size()-1);
            DevlistenModell.addElement("<html><pre>Device\t\t[ \"protocol\" ]</pre></html>");

            for( i = 0; i < DeviceList.size(); i++)
            {
                String[] tmp = Temp[i].split("\n");
                if(tmp.length < 4)
                {
                    DeviceList.remove(i);
                    break;
                }
                str = tmp[1].substring(tmp[1].indexOf("\"") + 1, tmp[1].length());
                s = "\n\t\t\"" + str.substring(0, str.indexOf("\"")) + "\": {";
                str = "<html><pre>" + str.substring(0, str.indexOf("\"")) + "\t";
                str += tmp[4].substring(tmp[4].indexOf(":") + 1, tmp[4].length()) + "</pre></html>";
                DevlistenModell.addElement(str);
                for(int j = 4; j < tmp.length; j++)
                {
                    if(j == tmp.length-1)
                    {
                        s += "\n\t\t" + tmp[j] + "\n\t";
                    }
                    else if(tmp[j].contains("[{"))
                    {
                        s += "\n\t\t" + tmp[j].substring(0, tmp[j].indexOf("[{")+2);
                        if(tmp[j].contains("}]"))
                        {
                            s += "\n\t\t\t" + tmp[j].substring(tmp[j].indexOf("[{") + 2, tmp[j].indexOf("}]"));
                            s += "\n\t\t" + tmp[j].substring(tmp[j].indexOf("}]"));
                        }
                        else
                            s += "\n\t\t\t" + tmp[j].substring(tmp[j].indexOf("[{") + 2);
                    }
                    else if(tmp[j].contains("}]"))
                    {
                        s += "\n\t\t\t" + tmp[j].substring(0, tmp[j].indexOf("}]"));
                        s += "\n\t\t" + tmp[j].substring(tmp[j].indexOf("}]"));
                    }
                    else
                    {
                        s += "\n\t\t" + tmp[j];
                    }
                }
                DeviceList.set(i, s);
            }
            jDevices.setModel(DevlistenModell);

            RulesList = new ArrayList<>();
            Temp = strRules.split("},");
            Temp[0] = "\n\t" + Temp[0];
            i = Temp[Temp.length-2].lastIndexOf('}');
            if(i != -1)
            {
                Temp[Temp.length-2] = Temp[Temp.length-2].substring(0, i);
                for(i = 0; i < Temp.length; i++)
                {
                    Temp[i] = Temp[i].replace("{", " {\n\t");
                    Temp[i] = Temp[i].replace("\t\n", "\n\t");
                    Temp[i] += "\n\t";
                }
                RulesList.addAll(Arrays.asList(Temp));
                RulesList.remove(RulesList.size()-1);
            }

            GUIList = new ArrayList<>();
            i = gui[1].indexOf("{");
            gui[1] = gui[1].substring(i+1, gui[1].length());
            Temp = gui[1].split("settings");
            Temp = Temp[0].split("},");
            i = Temp[Temp.length-2].lastIndexOf('}');
            if(i != -1)
            {
                Temp[Temp.length-2] = Temp[Temp.length-2].substring(0, i);
            }
            Temp[0] = "\t\n" + Temp[0];
            GUIList.addAll(Arrays.asList(Temp));
            GUIList.remove(GUIList.size() - 1);
            jGUI.removeAll();
            GUIlistenModell = new DefaultListModel();
            GUIlistenModell.addElement("<html><pre>Device\t\t\"name\"\t\t[ \"group\" ] </pre></html>");
            for( i = 0; i < GUIList.size(); i++)
            {
                String[] tmp = Temp[i].split("\n");
                if(tmp.length < 4)
                {
                    GUIList.remove(i);
                    break;
                }
                str = tmp[1].substring(tmp[1].indexOf("\"") + 1, tmp[1].length());
                s = "\n\t\t\"" + str.substring(0, str.indexOf("\"")) + "\": {";
                str = "<html><pre>" + str.substring(0, str.indexOf("\"")) + "\t";
                str += tmp[3].substring(tmp[3].indexOf(":") + 1, tmp[3].length())+ "\t";
                str += tmp[4].substring(tmp[4].indexOf(":") + 1, tmp[4].length()) + "</pre></html>";
                GUIlistenModell.addElement(str);
            
                for(int j = 3; j < tmp.length; j++)
                {
                    s += "\n\t\t\t" + tmp[j];
                }
                s += "\n\t\t";
                GUIList.set(i, s);
            }
            jGUI.setModel(GUIlistenModell);
            jNewDevice.setEnabled(true);
        }
    }//GEN-LAST:event_formWindowOpened

    private void jSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSettingsActionPerformed
        Settings settings = new Settings(this);
    }//GEN-LAST:event_jSettingsActionPerformed

    private void jCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCopyActionPerformed
        int selectedIndex = jDevices.getSelectedIndex()-1;
        String get = DeviceList.get(selectedIndex) + "}\n";
        NewDevice newDevice = new NewDevice(this, get, -2, selectedIndex);
    }//GEN-LAST:event_jCopyActionPerformed

    private void jAddGUI_ElementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddGUI_ElementActionPerformed
        int selectedIndex = jDevices.getSelectedIndex()-1;
        if(selectedIndex < 0)
            return;
        String get = DeviceList.get(selectedIndex);
        get = get.substring(0, get.indexOf("\":"));
        for (String str : GUIList) {
            str = str.substring(4, str.indexOf(":")-1);
            if(get.contains(str))
            {
                JOptionPane.showMessageDialog(null, "Entry exists!");
                return;
            }
        }
        String str;
        int i = get.indexOf("\"");
        str = get.substring(i+1, get.length());
        get = "\n" +
"		\"" + str + "\": {\n" +
"			\"name\": \"\",\n" +
"			\"group\": [ \"\" ],\n" +
"			\"media\": [ \"all\" ]\n" +
"	";
        GUIList.add(get);
        String[] tmp = get.split("\n");
        str = tmp[1].substring(tmp[1].indexOf("\"") + 1, tmp[1].length());
        str = "<html><pre>" + str.substring(0, str.indexOf("\"")) + "\t";
        str += tmp[2].substring(tmp[2].indexOf(":") + 1, tmp[2].length())+ "\t";
        str += tmp[3].substring(tmp[3].indexOf(":") + 1, tmp[3].length()) + "</pre></html>";
        GUIlistenModell.addElement(str);
        jGUI.setSelectedIndex(GUIlistenModell.size()-1);
        jGUI.ensureIndexIsVisible(GUIlistenModell.size()-1);
        GuiEditor ge = new GuiEditor(this, GUIlistenModell.size()-2);
        ge.setVisible(true);
    }//GEN-LAST:event_jAddGUI_ElementActionPerformed

    private void jAdjustMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jAdjustMousePressed
        Windows_X = evt.getX();
    }//GEN-LAST:event_jAdjustMousePressed

    private void jAdjustMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jAdjustMouseDragged
        int NewX = evt.getX() - Windows_X;
        Rectangle bounds = jAdjust.getBounds();
        bounds.x += NewX;
        AdjBounds = bounds;
        jAdjust.setBounds(bounds);
        bounds = jAddGUI_Element.getBounds();
        bounds.x += NewX;
        AddGUI_ElementBounds = bounds;
        jAddGUI_Element.setBounds(bounds);
        bounds = jDelGUI_Element.getBounds();
        bounds.x += NewX;
        DelGUI_ElementBounds = bounds;
        jDelGUI_Element.setBounds(bounds);
        Dimension preferredSize = jDevices.getSize();
        preferredSize.width += NewX;
        DevicesDimension = preferredSize;
        jDevices.setSize(preferredSize);
        preferredSize = jScrollPane1.getSize();
        preferredSize.width += NewX;
        jScrollPane1.setSize(preferredSize);
        DevicesScrollDimension = preferredSize;
        preferredSize = jGUI.getSize();
        preferredSize.width -= NewX;
        jGUI.setSize(preferredSize);
        bounds = jGUI.getBounds();
        bounds.x += NewX;
        GUI_Bounds = bounds;
        jGUI.setBounds(bounds);
        preferredSize = jScrollPane2.getSize();
        preferredSize.width -= NewX;
        jScrollPane2.setSize(preferredSize); 
        bounds.x = jScrollPane2.getX() + NewX;
        bounds.y = jScrollPane2.getY();
        bounds.width = preferredSize.width;
        bounds.height = preferredSize.height;
        jScrollPane2.setBounds(bounds);
        GUI_ScrollBounds = bounds;
        bounds = jLabelGUI.getBounds();
        bounds.x += NewX;
        jLabelGUI.setBounds(bounds);
        LabelBounds = bounds;
    }//GEN-LAST:event_jAdjustMouseDragged

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        if(AdjBounds != null) 
        {
            jAdjust.setBounds(AdjBounds);
            jDelGUI_Element.setBounds(DelGUI_ElementBounds);
            jAddGUI_Element.setBounds(AddGUI_ElementBounds);
            jLabelGUI.setBounds(LabelBounds);
            jScrollPane1.setSize(DevicesScrollDimension);
            jDevices.setSize(DevicesDimension);
            Rectangle bounds = jGUI.getBounds();
            bounds.width -= GUI_Bounds.x - bounds.x;
            bounds.x = GUI_Bounds.x;
            GUI_Bounds = bounds;
            jGUI.setBounds(GUI_Bounds);
            bounds = jScrollPane2.getBounds();
            bounds.width -= GUI_ScrollBounds.x - bounds.x;
            bounds.x = GUI_ScrollBounds.x;
            GUI_ScrollBounds = bounds;
            jScrollPane2.setBounds(GUI_ScrollBounds);
        }
    }//GEN-LAST:event_formComponentResized

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Config.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Config.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Config.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Config.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Config().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAddGUI_Element;
    private javax.swing.JButton jAdjust;
    private javax.swing.JButton jCopy;
    private javax.swing.JButton jDelDevice;
    private javax.swing.JButton jDelGUI_Element;
    private javax.swing.JList jDevices;
    private javax.swing.JButton jExit;
    private javax.swing.JList jGUI;
    private javax.swing.JButton jHelp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelGUI;
    private javax.swing.JButton jLoad;
    private javax.swing.JButton jNewDevice;
    private javax.swing.JButton jRules;
    private javax.swing.JButton jSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jSettings;
    // End of variables declaration//GEN-END:variables
}
